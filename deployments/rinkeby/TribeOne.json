{
  "address": "0x12335BFD2cCC425e1794b8F53a1d505611d1E2D7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_salesManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeTo",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeCurrency",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_multiSigWallet",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_assetManager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_loanId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "InstallmentPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_loanId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_fundCurreny",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_fundAmount",
          "type": "uint256"
        }
      ],
      "name": "LoanApproved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_loanId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        }
      ],
      "name": "LoanCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "LoanCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_loandId",
          "type": "uint256"
        }
      ],
      "name": "LoanDefaulted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_loanId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_salesManager",
          "type": "address"
        }
      ],
      "name": "LoanLiquidation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_loanId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_soldAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_finalDebt",
          "type": "uint256"
        }
      ],
      "name": "LoanPostLiquidation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_loanId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_accepted",
          "type": "bool"
        }
      ],
      "name": "NFTRelayed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_loanId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "NFTWithdrew",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_loanId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "RestWithdrew",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_feeTo",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_lateFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_penaltyFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_salesManager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_assetManager",
          "type": "address"
        }
      ],
      "name": "SettingsUpdate",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "GRACE_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_SLIPPAGE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TENOR_UNIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_loanId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_agent",
          "type": "address"
        }
      ],
      "name": "approveLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "assetManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_loanId",
          "type": "uint256"
        }
      ],
      "name": "cancelLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16[]",
          "name": "_loanRules",
          "type": "uint16[]"
        },
        {
          "internalType": "address[]",
          "name": "_currencies",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "nftAddressArray",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "nftTokenIdArray",
          "type": "uint256[]"
        },
        {
          "internalType": "enum TribeOneHelper.TokenType[]",
          "name": "nftTokenTypeArray",
          "type": "uint8[]"
        }
      ],
      "name": "createLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_loanId",
          "type": "uint256"
        }
      ],
      "name": "expectedLastPaymentTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeCurrency",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeTo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_loanId",
          "type": "uint256"
        }
      ],
      "name": "finalDebtAndPenalty",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_loanId",
          "type": "uint256"
        }
      ],
      "name": "getBackFund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_loanId",
          "type": "uint256"
        }
      ],
      "name": "getCollateralAsset",
      "outputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_loanId",
          "type": "uint256"
        }
      ],
      "name": "getLoanAsset",
      "outputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_loanId",
          "type": "uint256"
        }
      ],
      "name": "getLoanNFTCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_loanId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_nftItemId",
          "type": "uint256"
        }
      ],
      "name": "getLoanNFTItem",
      "outputs": [
        {
          "internalType": "address",
          "name": "_nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_loanId",
          "type": "uint256"
        }
      ],
      "name": "getLoanRules",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "tenor",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "LTV",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "interest",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lateFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "loanIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "loans",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fundAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "paidAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "loanStart",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "postTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "restAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "nrOfPenalty",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "passedTenors",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            }
          ],
          "internalType": "struct TribeOne.Asset",
          "name": "loanAsset",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            }
          ],
          "internalType": "struct TribeOne.Asset",
          "name": "collateralAsset",
          "type": "tuple"
        },
        {
          "internalType": "enum TribeOne.Status",
          "name": "status",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "tenor",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "LTV",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "interest",
              "type": "uint16"
            }
          ],
          "internalType": "struct TribeOne.LoanRules",
          "name": "loanRules",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_loanIds",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "_currency",
          "type": "address"
        }
      ],
      "name": "lockRestAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_loanId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "payInstallment",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "penaltyFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_loanId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "postLiquidation",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_loanId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_agent",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_accepted",
          "type": "bool"
        }
      ],
      "name": "relayNFT",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "salesManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_loanId",
          "type": "uint256"
        }
      ],
      "name": "setLoanDefaulted",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_loanId",
          "type": "uint256"
        }
      ],
      "name": "setLoanLiquidation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tenorUnit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_gracePeriod",
          "type": "uint256"
        }
      ],
      "name": "setPeriods",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeTo",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_lateFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_penaltyFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_salesManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_assetManager",
          "type": "address"
        }
      ],
      "name": "setSettings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_loanId",
          "type": "uint256"
        }
      ],
      "name": "totalDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_loanId",
          "type": "uint256"
        }
      ],
      "name": "withdrawNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xb657c1f0c4764a189483db3879c4749d01509fbdf1a453a947164f0fac9a2114",
  "receipt": {
    "to": null,
    "from": "0x6C641CE6A7216F12d28692f9d8b2BDcdE812eD2b",
    "contractAddress": "0x12335BFD2cCC425e1794b8F53a1d505611d1E2D7",
    "transactionIndex": 5,
    "gasUsed": "3839002",
    "logsBloom": "0x
    "blockHash": "0xf1f71510b9f395ed35ab3ee72845d1c09d988520e1ee9d63a1744c3f9484bc70",
    "transactionHash": "0xb657c1f0c4764a189483db3879c4749d01509fbdf1a453a947164f0fac9a2114",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 9676054,
        "transactionHash": "0xb657c1f0c4764a189483db3879c4749d01509fbdf1a453a947164f0fac9a2114",
        "address": "0x12335BFD2cCC425e1794b8F53a1d505611d1E2D7",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006c641ce6a7216f12d28692f9d8b2bdcde812ed2b"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0xf1f71510b9f395ed35ab3ee72845d1c09d988520e1ee9d63a1744c3f9484bc70"
      },
      {
        "transactionIndex": 5,
        "blockNumber": 9676054,
        "transactionHash": "0xb657c1f0c4764a189483db3879c4749d01509fbdf1a453a947164f0fac9a2114",
        "address": "0x12335BFD2cCC425e1794b8F53a1d505611d1E2D7",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000006c641ce6a7216f12d28692f9d8b2bdcde812ed2b",
          "0x000000000000000000000000153a2fc88ac5eddbc915a0c3d3c1b86ce8f84842"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0xf1f71510b9f395ed35ab3ee72845d1c09d988520e1ee9d63a1744c3f9484bc70"
      }
    ],
    "blockNumber": 9676054,
    "cumulativeGasUsed": "4854847",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6C641CE6A7216F12d28692f9d8b2BDcdE812eD2b",
    "0x6C641CE6A7216F12d28692f9d8b2BDcdE812eD2b",
    "0xd8f50554055Be0276fa29F40Fb3227FE96B5D6c2",
    "0x153A2FC88aC5EDDBC915A0c3d3c1B86ce8F84842",
    "0x997036a4DC288C7d0C7C570e61dCdb54F0a3d6B2"
  ],
  "solcInputHash": "022ddec237f5a0a0c9eeb2d302dd7e90",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_salesManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeCurrency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_multiSigWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_assetManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_loanId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"InstallmentPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_loanId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_fundCurreny\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fundAmount\",\"type\":\"uint256\"}],\"name\":\"LoanApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_loanId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"LoanCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LoanCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_loandId\",\"type\":\"uint256\"}],\"name\":\"LoanDefaulted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_loanId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_salesManager\",\"type\":\"address\"}],\"name\":\"LoanLiquidation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_loanId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_soldAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_finalDebt\",\"type\":\"uint256\"}],\"name\":\"LoanPostLiquidation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_loanId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_accepted\",\"type\":\"bool\"}],\"name\":\"NFTRelayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_loanId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"NFTWithdrew\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_loanId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"RestWithdrew\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lateFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_penaltyFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_salesManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_assetManager\",\"type\":\"address\"}],\"name\":\"SettingsUpdate\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"GRACE_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SLIPPAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TENOR_UNIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_loanId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_agent\",\"type\":\"address\"}],\"name\":\"approveLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_loanId\",\"type\":\"uint256\"}],\"name\":\"cancelLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"_loanRules\",\"type\":\"uint16[]\"},{\"internalType\":\"address[]\",\"name\":\"_currencies\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"nftAddressArray\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"nftTokenIdArray\",\"type\":\"uint256[]\"},{\"internalType\":\"enum TribeOneHelper.TokenType[]\",\"name\":\"nftTokenTypeArray\",\"type\":\"uint8[]\"}],\"name\":\"createLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_loanId\",\"type\":\"uint256\"}],\"name\":\"expectedLastPaymentTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCurrency\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_loanId\",\"type\":\"uint256\"}],\"name\":\"finalDebtAndPenalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_loanId\",\"type\":\"uint256\"}],\"name\":\"getBackFund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_loanId\",\"type\":\"uint256\"}],\"name\":\"getCollateralAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_loanId\",\"type\":\"uint256\"}],\"name\":\"getLoanAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_loanId\",\"type\":\"uint256\"}],\"name\":\"getLoanNFTCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_loanId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nftItemId\",\"type\":\"uint256\"}],\"name\":\"getLoanNFTItem\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_loanId\",\"type\":\"uint256\"}],\"name\":\"getLoanRules\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"tenor\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"LTV\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"interest\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lateFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loanIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"loans\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fundAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paidAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loanStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"postTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"restAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"nrOfPenalty\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"passedTenors\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"internalType\":\"struct TribeOne.Asset\",\"name\":\"loanAsset\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"internalType\":\"struct TribeOne.Asset\",\"name\":\"collateralAsset\",\"type\":\"tuple\"},{\"internalType\":\"enum TribeOne.Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"tenor\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"LTV\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"interest\",\"type\":\"uint16\"}],\"internalType\":\"struct TribeOne.LoanRules\",\"name\":\"loanRules\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_loanIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"}],\"name\":\"lockRestAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_loanId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"payInstallment\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"penaltyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_loanId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"postLiquidation\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_loanId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_agent\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_accepted\",\"type\":\"bool\"}],\"name\":\"relayNFT\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"salesManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_loanId\",\"type\":\"uint256\"}],\"name\":\"setLoanDefaulted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_loanId\",\"type\":\"uint256\"}],\"name\":\"setLoanLiquidation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tenorUnit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gracePeriod\",\"type\":\"uint256\"}],\"name\":\"setPeriods\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lateFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_penaltyFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_salesManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_assetManager\",\"type\":\"address\"}],\"name\":\"setSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_loanId\",\"type\":\"uint256\"}],\"name\":\"totalDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_loanId\",\"type\":\"uint256\"}],\"name\":\"withdrawNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createLoan(uint16[],address[],address[],uint256[],uint256[],uint8[])\":{\"details\":\"_fundAmount shoud be amount in loan currency, and _collateralAmount should be in collateral currency\"},\"getBackFund(uint256)\":{\"details\":\"User can get back the rest money through this function, but he should pay late fee.\"},\"lockRestAmount(uint256[],address)\":{\"details\":\"if user does not want to get back rest of money due to some reasons, such as gas fee... we will transfer rest money to our fee address (after 14 days notification). For saving gas fee, we will transfer once for the one kind of token.\"},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"postLiquidation(uint256,uint256)\":{\"details\":\"after sold NFT set in market place, and give that fund back to TribeOne Only sales manager can do this\"},\"relayNFT(uint256,address,bool)\":{\"details\":\"_loanId: loanId, _accepted: order to Partner is succeeded or not loan will be back to TribeOne if accepted is false\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setPeriods(uint256,uint256)\":{\"details\":\"It's just for only testnet. TODO It should be removed when mainnet deploy\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"TENOR_UNIT\":{\"details\":\"It's for only testnet TODO It should reverted to above in mainnet\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TribeOne.sol\":\"TribeOne\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x1278c76b840063ff5e14a2d7c5707812c1eabc2342ed040bf862c2d7552102fe\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x249bc2a6d919da5f5145950664134cfcf2f66874bda801fd3b8fb861783da079\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n}\\n\",\"keccak256\":\"0x7c0ea2d284bad1aa002165ba4c5eac30070be8e56b19dba1ac7c8f2c8bd4832c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x2ccdc162657b677334eb08a60bb50a0dd74b22eff7150abb06487f58dbebd5e5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xfb1161632a10d0bd366c80db583246fa490183b45ec4f59acb43b97d1a7437b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xc1c941ad1e580b4623007305921efe2f26fc7320a4edc226234dd707c658a428\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x96877bb2eb8ca360e949ee1bd77b47a14e92e42f79897c350f088f87a3c231d4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n  /**\\n   * @dev Implementation of the {IERC721Receiver} interface.\\n   *\\n   * Accepts all token transfers.\\n   * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n   */\\ncontract ERC721Holder is IERC721Receiver {\\n\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0xd260defa45bc1bbdf5e6d74298fb2705bf058c3d2beb17fb1158fa1a430c5024\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x62d306ff0499a11913bc60b5939eec619509b5c67b30e86ebf8b8bda0b7a7fee\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/TribeOne.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\r\\nimport \\\"./interfaces/ITribeOne.sol\\\";\\r\\nimport \\\"./interfaces/IAssetManager.sol\\\";\\r\\nimport \\\"./libraries/TribeOneHelper.sol\\\";\\r\\n\\r\\ncontract TribeOne is ERC721Holder, ERC1155Holder, ITribeOne, Ownable, ReentrancyGuard {\\r\\n    using Counters for Counters.Counter;\\r\\n\\r\\n    enum Status {\\r\\n        AVOID_ZERO, // just for avoid zero\\r\\n        LISTED, // after the loan has been created --> the next status will be APPROVED\\r\\n        APPROVED, // in this status the loan has a lender -- will be set after approveLoan(). loan fund => borrower\\r\\n        LOANACTIVED, // NFT was brought from opensea by agent and staked in TribeOne - relayNFT()\\r\\n        LOANPAID, // loan was paid fully but still in TribeOne\\r\\n        WITHDRAWN, // the final status, the collateral returned to the borrower or to the lender withdrawNFT()\\r\\n        FAILED, // NFT buying order was failed in partner's platform such as opensea...\\r\\n        CANCELLED, // only if loan is LISTED - cancelLoan()\\r\\n        DEFAULTED, // Grace period = 15 days were passed from the last payment schedule\\r\\n        LIQUIDATION, // NFT was put in marketplace\\r\\n        POSTLIQUIDATION, /// NFT was sold\\r\\n        RESTWITHDRAWN, // user get back the rest of money from the money which NFT set is sold in marketplace\\r\\n        RESTLOCKED // Rest amount was forcely locked because he did not request to get back with in 2 weeks (GRACE PERIODS)\\r\\n    }\\r\\n\\r\\n    struct Asset {\\r\\n        uint256 amount;\\r\\n        address currency; // address(0) is BNB native coin\\r\\n    }\\r\\n\\r\\n    struct LoanRules {\\r\\n        uint16 tenor;\\r\\n        uint16 LTV; // 10000 - 100%\\r\\n        uint16 interest; // 10000 - 100%\\r\\n    }\\r\\n\\r\\n    struct Loan {\\r\\n        uint256 fundAmount; // the amount which user put in TribeOne to buy NFT\\r\\n        uint256 paidAmount; // the amount that has been paid back to the lender to date\\r\\n        uint256 loanStart; // the point when the loan is approved\\r\\n        uint256 postTime; // the time when NFT set was sold in marketplace and that money was put in TribeOne\\r\\n        uint256 restAmount; // rest amount after sending loan debt(+interest) and 5% penalty\\r\\n        address borrower; // the address who receives the loan\\r\\n        uint8 nrOfPenalty;\\r\\n        uint8 passedTenors; // the number of tenors which we can consider user passed\\r\\n        Asset loanAsset;\\r\\n        Asset collateralAsset;\\r\\n        Status status; // the loan status\\r\\n        LoanRules loanRules;\\r\\n        address[] nftAddressArray; // the adderess of the ERC721\\r\\n        uint256[] nftTokenIdArray; // the unique identifier of the NFT token that the borrower uses as collateral\\r\\n        TribeOneHelper.TokenType[] nftTokenTypeArray; // the token types : ERC721 , ERC1155 , ...\\r\\n    }\\r\\n\\r\\n    mapping(uint256 => Loan) public loans; // loanId => Loan\\r\\n    Counters.Counter public loanIds; // loanId is from No.1\\r\\n    // uint public loanLength;\\r\\n    uint256 public constant MAX_SLIPPAGE = 500; // 5%\\r\\n    // uint256 public constant TENOR_UNIT = 4 weeks; // installment should be pay at least in every 4 weeks\\r\\n    // uint256 public constant GRACE_PERIOD = 14 days; // 2 weeks\\r\\n\\r\\n    /**\\r\\n     * @dev It's for only testnet\\r\\n     * TODO It should reverted to above in mainnet\\r\\n     */\\r\\n    uint256 public TENOR_UNIT = 7 minutes;\\r\\n    uint256 public GRACE_PERIOD = 3 minutes;\\r\\n\\r\\n    address public salesManager;\\r\\n    address public assetManager;\\r\\n    address public feeTo;\\r\\n    address public immutable feeCurrency; // stable coin such as USDC, late fee $5\\r\\n    uint256 public lateFee; // we will set it 5 USD for each tenor late\\r\\n    uint256 public penaltyFee; // we will set it 5% in the future - 1000 = 100%\\r\\n\\r\\n    event LoanCreated(uint256 indexed loanId, address indexed owner);\\r\\n    event LoanApproved(uint256 indexed _loanId, address indexed _to, address _fundCurreny, uint256 _fundAmount);\\r\\n    event LoanCanceled(uint256 indexed _loanId, address _sender);\\r\\n    event NFTRelayed(uint256 indexed _loanId, address indexed _sender, bool _accepted);\\r\\n    event InstallmentPaid(uint256 indexed _loanId, address _sender, address _currency, uint256 _amount);\\r\\n    event NFTWithdrew(uint256 indexed _loanId, address _to);\\r\\n    event LoanDefaulted(uint256 indexed _loandId);\\r\\n    event LoanLiquidation(uint256 indexed _loanId, address _salesManager);\\r\\n    event LoanPostLiquidation(uint256 indexed _loanId, uint256 _soldAmount, uint256 _finalDebt);\\r\\n    event RestWithdrew(uint256 indexed _loanId, uint256 _amount);\\r\\n    event SettingsUpdate(address _feeTo, uint256 _lateFee, uint256 _penaltyFee, address _salesManager, address _assetManager);\\r\\n\\r\\n    constructor(\\r\\n        address _salesManager,\\r\\n        address _feeTo,\\r\\n        address _feeCurrency,\\r\\n        address _multiSigWallet,\\r\\n        address _assetManager\\r\\n    ) {\\r\\n        require(\\r\\n            _salesManager != address(0) && _feeTo != address(0) && _feeCurrency != address(0) && _multiSigWallet != address(0),\\r\\n            \\\"TribeOne: ZERO address\\\"\\r\\n        );\\r\\n        salesManager = _salesManager;\\r\\n        assetManager = _assetManager;\\r\\n        feeTo = _feeTo;\\r\\n        feeCurrency = _feeCurrency;\\r\\n\\r\\n        transferOwnership(_multiSigWallet);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev It's just for only testnet.\\r\\n     * TODO It should be removed when mainnet deploy\\r\\n     */\\r\\n    function setPeriods(uint _tenorUnit, uint _gracePeriod) external {\\r\\n        require(msg.sender == address(0x6C641CE6A7216F12d28692f9d8b2BDcdE812eD2b));\\r\\n        TENOR_UNIT = _tenorUnit;\\r\\n        GRACE_PERIOD = _gracePeriod;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    function getLoanAsset(uint256 _loanId) external view returns (address _token, uint256 _amount) {\\r\\n        _token = loans[_loanId].loanAsset.currency;\\r\\n        _amount = loans[_loanId].loanAsset.amount;\\r\\n    }\\r\\n\\r\\n    function getCollateralAsset(uint256 _loanId) external view returns (address _token, uint256 _amount) {\\r\\n        _token = loans[_loanId].collateralAsset.currency;\\r\\n        _amount = loans[_loanId].collateralAsset.amount;\\r\\n    }\\r\\n\\r\\n    function getLoanRules(uint256 _loanId)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint16 tenor,\\r\\n            uint16 LTV,\\r\\n            uint16 interest\\r\\n        )\\r\\n    {\\r\\n        tenor = loans[_loanId].loanRules.tenor;\\r\\n        LTV = loans[_loanId].loanRules.LTV;\\r\\n        interest = loans[_loanId].loanRules.interest;\\r\\n    }\\r\\n\\r\\n    function getLoanNFTCount(uint256 _loanId) external view returns (uint256) {\\r\\n        return loans[_loanId].nftAddressArray.length;\\r\\n    }\\r\\n\\r\\n    function getLoanNFTItem(uint256 _loanId, uint256 _nftItemId) external view returns (address _nftAddress, uint256 _tokenId) {\\r\\n        _nftAddress = loans[_loanId].nftAddressArray[_nftItemId];\\r\\n        _tokenId = loans[_loanId].nftTokenIdArray[_nftItemId];\\r\\n    }\\r\\n\\r\\n    function setSettings(\\r\\n        address _feeTo,\\r\\n        uint256 _lateFee,\\r\\n        uint256 _penaltyFee,\\r\\n        address _salesManager,\\r\\n        address _assetManager\\r\\n    ) external onlyOwner {\\r\\n        require(_salesManager != address(0) && _feeTo != address(0), \\\"TribeOne: ZERO address\\\");\\r\\n        feeTo = _feeTo;\\r\\n        lateFee = _lateFee;\\r\\n        penaltyFee = _penaltyFee;\\r\\n        salesManager = _salesManager;\\r\\n        assetManager = _assetManager;\\r\\n        emit SettingsUpdate(_feeTo, _lateFee, _penaltyFee, _salesManager, assetManager);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev _fundAmount shoud be amount in loan currency, and _collateralAmount should be in collateral currency\\r\\n     */\\r\\n    function createLoan(\\r\\n        uint16[] calldata _loanRules, // tenor, LTV, interest, 10000 - 100% to use array - avoid stack too deep\\r\\n        address[] calldata _currencies, // _loanCurrency, _collateralCurrency, address(0) is native coin\\r\\n        address[] calldata nftAddressArray,\\r\\n        uint256[] calldata _amounts, // _fundAmount, _collateralAmount\\r\\n        uint256[] calldata nftTokenIdArray,\\r\\n        TribeOneHelper.TokenType[] memory nftTokenTypeArray\\r\\n    ) external {\\r\\n        require(_loanRules.length == 3 && _amounts.length == 2, \\\"TribeOne: Invalid parameter\\\");\\r\\n        uint16 tenor = _loanRules[0];\\r\\n        uint16 LTV = _loanRules[1];\\r\\n        uint16 interest = _loanRules[2];\\r\\n        require(_loanRules[1] > 0, \\\"TribeOne: LTV should not be ZERO\\\");\\r\\n        require(_loanRules[0] > 0, \\\"TribeOne: Loan must have at least 1 installment\\\");\\r\\n        require(nftAddressArray.length > 0, \\\"TribeOne: Loan must have at least 1 NFT\\\");\\r\\n        address _collateralCurrency = _currencies[1];\\r\\n        address _loanCurrency = _currencies[0];\\r\\n        require(IAssetManager(assetManager).isAvailableLoanAsset(_loanCurrency), \\\"TribeOne: Loan asset is not available\\\");\\r\\n        require(IAssetManager(assetManager).isAvailableCollateralAsset(_collateralCurrency), \\\"TribeOne: Collateral asset is not available\\\");\\r\\n\\r\\n        require(_collateralCurrency != _loanCurrency && _collateralCurrency != address(0), \\\"TribeOne: Wrong collateral assets\\\");\\r\\n\\r\\n        require(\\r\\n            nftAddressArray.length == nftTokenIdArray.length && nftTokenIdArray.length == nftTokenTypeArray.length,\\r\\n            \\\"TribeOne: NFT provided informations are missing or incomplete\\\"\\r\\n        );\\r\\n\\r\\n        loanIds.increment();\\r\\n        uint256 loanID = loanIds.current();\\r\\n\\r\\n        // Transfer Collateral from sender to contract\\r\\n        uint256 _fundAmount = _amounts[0];\\r\\n        uint256 _collateralAmount = _amounts[1];\\r\\n\\r\\n        // Transfer collateral to TribeOne\\r\\n        TribeOneHelper.safeTransferFrom(_collateralCurrency, _msgSender(), address(this), _collateralAmount);\\r\\n        \\r\\n        loans[loanID].nftAddressArray = nftAddressArray;\\r\\n        loans[loanID].borrower = _msgSender();\\r\\n        loans[loanID].loanAsset = Asset({currency: _loanCurrency, amount: 0});\\r\\n        loans[loanID].collateralAsset = Asset({currency: _collateralCurrency, amount: _collateralAmount});\\r\\n        loans[loanID].loanRules = LoanRules({tenor: tenor, LTV: LTV, interest: interest});\\r\\n        loans[loanID].nftTokenIdArray = nftTokenIdArray;\\r\\n        loans[loanID].fundAmount = _fundAmount;\\r\\n\\r\\n        loans[loanID].status = Status.LISTED;\\r\\n        loans[loanID].nftTokenTypeArray = nftTokenTypeArray;\\r\\n\\r\\n        emit LoanCreated(loanID, msg.sender);\\r\\n    }\\r\\n\\r\\n    function approveLoan(\\r\\n        uint256 _loanId,\\r\\n        uint256 _amount,\\r\\n        address _agent\\r\\n    ) external override onlyOwner nonReentrant {\\r\\n        Loan storage _loan = loans[_loanId];\\r\\n        require(_loan.status == Status.LISTED, \\\"TribeOne: Invalid request\\\");\\r\\n        require(_agent != address(0), \\\"TribeOne: ZERO address\\\");\\r\\n\\r\\n        uint256 _fundAmount = _loan.fundAmount;\\r\\n        uint256 _LTV = _loan.loanRules.LTV;\\r\\n\\r\\n        uint256 expectedPrice = TribeOneHelper.getExpectedPrice(_fundAmount, _LTV, MAX_SLIPPAGE);\\r\\n        require(_amount <= expectedPrice, \\\"TribeOne: Invalid amount\\\");\\r\\n\\r\\n        _loan.status = Status.APPROVED;\\r\\n        address _token = _loan.loanAsset.currency;\\r\\n\\r\\n        _loan.loanAsset.amount = _amount - _loan.fundAmount;\\r\\n\\r\\n        if (_token == address(0)) {\\r\\n            IAssetManager(assetManager).requestETH(_agent, _amount);\\r\\n        } else {\\r\\n            IAssetManager(assetManager).requestToken(_agent, _token, _amount);\\r\\n        }\\r\\n\\r\\n        emit LoanApproved(_loanId, _agent, _token, _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev _loanId: loanId, _accepted: order to Partner is succeeded or not\\r\\n     * loan will be back to TribeOne if accepted is false\\r\\n     */\\r\\n    function relayNFT(\\r\\n        uint256 _loanId,\\r\\n        address _agent,\\r\\n        bool _accepted\\r\\n    ) external payable override onlyOwner nonReentrant {\\r\\n        Loan storage _loan = loans[_loanId];\\r\\n        require(_loan.status == Status.APPROVED, \\\"TribeOne: Not approved loan\\\");\\r\\n        require(_agent != address(0), \\\"TribeOne: ZERO address\\\");\\r\\n        if (_accepted) {\\r\\n            uint256 len = _loan.nftAddressArray.length;\\r\\n            for (uint256 ii = 0; ii < len; ii++) {\\r\\n                TribeOneHelper.safeTransferNFT(\\r\\n                    _loan.nftAddressArray[ii],\\r\\n                    _agent,\\r\\n                    address(this),\\r\\n                    _loan.nftTokenTypeArray[ii],\\r\\n                    _loan.nftTokenIdArray[ii]\\r\\n                );\\r\\n            }\\r\\n\\r\\n            _loan.status = Status.LOANACTIVED;\\r\\n            _loan.loanStart = block.timestamp;\\r\\n            // user can not get back collateral in this case, we transfer collateral to AssetManager\\r\\n            address _currency = _loan.collateralAsset.currency;\\r\\n            uint256 _amount = _loan.collateralAsset.amount;\\r\\n            TribeOneHelper.safeTransferAsset(_currency, assetManager, _amount);\\r\\n        } else {\\r\\n            _loan.status = Status.FAILED;\\r\\n            // refund loan\\r\\n            // in the case when loan currency is ETH, loan amount should be fund back from agent to TribeOne AssetNanager\\r\\n            address _token = _loan.loanAsset.currency;\\r\\n            uint256 _amount = _loan.loanAsset.amount;\\r\\n            if (_token == address(0)) {\\r\\n                require(msg.value >= _amount, \\\"TribeOne: Less than loan amount\\\");\\r\\n                if (msg.value > _amount) {\\r\\n                    TribeOneHelper.safeTransferETH(_agent, msg.value - _amount);\\r\\n                }\\r\\n                TribeOneHelper.safeTransferETH(assetManager, _amount);\\r\\n            } else {\\r\\n                TribeOneHelper.safeTransferFrom(_token, _agent, assetManager, _amount);\\r\\n            }\\r\\n\\r\\n            returnColleteral(_loanId);\\r\\n        }\\r\\n\\r\\n        emit NFTRelayed(_loanId, _agent, _accepted);\\r\\n    }\\r\\n\\r\\n    function payInstallment(uint256 _loanId, uint256 _amount) external payable nonReentrant {\\r\\n        Loan storage _loan = loans[_loanId];\\r\\n        require(_loan.status == Status.LOANACTIVED || _loan.status == Status.DEFAULTED, \\\"TribeOne: Invalid status\\\");\\r\\n        uint256 expectedNr = expectedNrOfPayments(_loanId);\\r\\n\\r\\n        address _loanCurrency = _loan.loanAsset.currency;\\r\\n        if (_loanCurrency == address(0)) {\\r\\n            _amount = msg.value;\\r\\n        }\\r\\n\\r\\n        uint256 paidAmount = _loan.paidAmount;\\r\\n        uint256 _totalDebt = totalDebt(_loanId);\\r\\n        {\\r\\n            uint256 expectedAmount = (_totalDebt * expectedNr) / _loan.loanRules.tenor;\\r\\n            require(paidAmount + _amount >= expectedAmount, \\\"TribeOne: Insufficient Amount\\\");\\r\\n            // out of rule, penalty\\r\\n            _updatePenalty(_loanId);\\r\\n        }\\r\\n\\r\\n        // Transfer asset from msg.sender to contract\\r\\n        uint256 dust;\\r\\n        if (paidAmount + _amount > _totalDebt) {\\r\\n            dust = paidAmount + _amount - _totalDebt;\\r\\n        }\\r\\n        _amount -= dust;\\r\\n        // NOTE - don't merge two conditions\\r\\n        // All user payments will go to AssetManager contract\\r\\n        if (_loanCurrency == address(0)) {\\r\\n            if (dust > 0) {\\r\\n                TribeOneHelper.safeTransferETH(_msgSender(), dust);\\r\\n            }\\r\\n            TribeOneHelper.safeTransferETH(assetManager, _amount);\\r\\n        } else {\\r\\n            TribeOneHelper.safeTransferFrom(_loanCurrency, _msgSender(), assetManager, _amount);\\r\\n        }\\r\\n\\r\\n        _loan.paidAmount += _amount;\\r\\n        uint256 passedTenors = (_loan.paidAmount * _loan.loanRules.tenor) / _totalDebt;\\r\\n\\r\\n        if (passedTenors > _loan.passedTenors) {\\r\\n            _loan.passedTenors = uint8(passedTenors);\\r\\n        }\\r\\n\\r\\n        if (_loan.status == Status.DEFAULTED) {\\r\\n            _loan.status = Status.LOANACTIVED;\\r\\n        }\\r\\n\\r\\n        // If user is borrower and loan is paid whole amount and he has no lateFee, give back NFT here directly\\r\\n        // else borrower should call withdraw manually himself\\r\\n        // We should check conditions first to avoid transaction failed\\r\\n        if (paidAmount + _amount == _totalDebt) {\\r\\n            _loan.status = Status.LOANPAID;\\r\\n            if (_loan.borrower == _msgSender() && _loan.nrOfPenalty == 0) {\\r\\n                _withdrawNFT(_loanId);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit InstallmentPaid(_loanId, msg.sender, _loanCurrency, _amount);\\r\\n    }\\r\\n\\r\\n    function withdrawNFT(uint256 _loanId) external nonReentrant {\\r\\n        _withdrawNFT(_loanId);\\r\\n    }\\r\\n\\r\\n    function _withdrawNFT(uint256 _loanId) private {\\r\\n        Loan storage _loan = loans[_loanId];\\r\\n        require(_loan.status == Status.LOANPAID, \\\"TribeOne: Invalid status - you have still debt to pay\\\");\\r\\n        address _sender = _msgSender();\\r\\n        require(_sender == _loan.borrower, \\\"TribeOne: Forbidden\\\");\\r\\n        _loan.status = Status.WITHDRAWN;\\r\\n\\r\\n        if (_loan.nrOfPenalty > 0 && lateFee > 0) {\\r\\n            uint256 _totalLateFee = _loan.nrOfPenalty * lateFee * (10**IERC20Metadata(feeCurrency).decimals());\\r\\n            TribeOneHelper.safeTransferFrom(feeCurrency, _sender, address(feeTo), _totalLateFee);\\r\\n        }\\r\\n\\r\\n        uint256 len = _loan.nftAddressArray.length;\\r\\n        for (uint256 ii = 0; ii < len; ii++) {\\r\\n            address _nftAddress = _loan.nftAddressArray[ii];\\r\\n            uint256 _tokenId = _loan.nftTokenIdArray[ii];\\r\\n            TribeOneHelper.safeTransferNFT(_nftAddress, address(this), _sender, _loan.nftTokenTypeArray[ii], _tokenId);\\r\\n        }\\r\\n\\r\\n        emit NFTWithdrew(_loanId, _sender);\\r\\n    }\\r\\n\\r\\n    function _updatePenalty(uint256 _loanId) private {\\r\\n        Loan storage _loan = loans[_loanId];\\r\\n        require(_loan.status == Status.LOANACTIVED || _loan.status == Status.DEFAULTED, \\\"TribeOne: Not actived loan\\\");\\r\\n        uint256 expectedNr = expectedNrOfPayments(_loanId);\\r\\n        uint256 passedTenors = _loan.passedTenors;\\r\\n        if (expectedNr > passedTenors) {\\r\\n            _loan.passedTenors = uint8(expectedNr);\\r\\n            _loan.nrOfPenalty += uint8(expectedNr - passedTenors);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function totalDebt(uint256 _loanId) public view returns (uint256) {\\r\\n        Loan storage _loan = loans[_loanId];\\r\\n        return (_loan.loanAsset.amount * (10000 + _loan.loanRules.interest)) / 10000;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *@dev when user in Tenor 2 (from tenor 1 to tenor 2, we expect at least one time payment)\\r\\n     */\\r\\n    function expectedNrOfPayments(uint256 _loanId) private view returns (uint256) {\\r\\n        uint256 loanStart = loans[_loanId].loanStart;\\r\\n        uint256 _expected = (block.timestamp - loanStart) / TENOR_UNIT;\\r\\n        uint256 _tenor = loans[_loanId].loanRules.tenor;\\r\\n        return _expected > _tenor ? _tenor : _expected;\\r\\n    }\\r\\n\\r\\n    function expectedLastPaymentTime(uint256 _loanId) public view returns (uint256) {\\r\\n        Loan storage _loan = loans[_loanId];\\r\\n        return _loan.loanStart + TENOR_UNIT * (_loan.passedTenors);\\r\\n    }\\r\\n\\r\\n    function setLoanDefaulted(uint256 _loanId) external nonReentrant {\\r\\n        Loan storage _loan = loans[_loanId];\\r\\n        require(_loan.status == Status.LOANACTIVED, \\\"TribeOne: Invalid status\\\");\\r\\n        require(expectedLastPaymentTime(_loanId) < block.timestamp, \\\"TribeOne: Not overdued date yet\\\");\\r\\n\\r\\n        _updatePenalty(_loanId);\\r\\n        _loan.status = Status.DEFAULTED;\\r\\n\\r\\n        emit LoanDefaulted(_loanId);\\r\\n    }\\r\\n\\r\\n    function setLoanLiquidation(uint256 _loanId) external nonReentrant {\\r\\n        Loan storage _loan = loans[_loanId];\\r\\n        require(_loan.status == Status.DEFAULTED, \\\"TribeOne: Invalid status\\\");\\r\\n        require(expectedLastPaymentTime(_loanId) + GRACE_PERIOD < block.timestamp, \\\"TribeOne: Not overdued date yet\\\");\\r\\n        _loan.status = Status.LIQUIDATION;\\r\\n        uint256 len = _loan.nftAddressArray.length;\\r\\n\\r\\n        // Transfering NFTs first\\r\\n        for (uint256 ii = 0; ii < len; ii++) {\\r\\n            address _nftAddress = _loan.nftAddressArray[ii];\\r\\n            uint256 _tokenId = _loan.nftTokenIdArray[ii];\\r\\n            TribeOneHelper.safeTransferNFT(_nftAddress, address(this), salesManager, _loan.nftTokenTypeArray[ii], _tokenId);\\r\\n        }\\r\\n\\r\\n        emit LoanLiquidation(_loanId, salesManager);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev after sold NFT set in market place, and give that fund back to TribeOne\\r\\n     * Only sales manager can do this\\r\\n     */\\r\\n    function postLiquidation(uint256 _loanId, uint256 _amount) external payable nonReentrant {\\r\\n        require(_msgSender() == salesManager, \\\"TribeOne: Forbidden\\\");\\r\\n        Loan storage _loan = loans[_loanId];\\r\\n        require(_loan.status == Status.LIQUIDATION, \\\"TribeOne: invalid status\\\");\\r\\n\\r\\n        // We collect fees to our feeTo address\\r\\n        address _currency = _loan.loanAsset.currency;\\r\\n        _amount = _currency == address(0) ? msg.value : _amount;\\r\\n        uint256 _finalDebt = finalDebtAndPenalty(_loanId);\\r\\n        if (_currency == address(0)) {\\r\\n            _finalDebt = _amount > _finalDebt ? _finalDebt : _amount;\\r\\n            TribeOneHelper.safeTransferETH(feeTo, _finalDebt);\\r\\n        } else {\\r\\n            TribeOneHelper.safeTransferFrom(_currency, _msgSender(), address(this), _amount);\\r\\n            _finalDebt = _amount > _finalDebt ? _finalDebt : _amount;\\r\\n            TribeOneHelper.safeTransfer(_currency, feeTo, _finalDebt);\\r\\n        }\\r\\n\\r\\n        _loan.status = Status.POSTLIQUIDATION;\\r\\n        if (_amount > _finalDebt) {\\r\\n            _loan.restAmount = _amount - _finalDebt;\\r\\n        }\\r\\n        _loan.postTime = block.timestamp;\\r\\n        emit LoanPostLiquidation(_loanId, _amount, _finalDebt);\\r\\n    }\\r\\n\\r\\n    function finalDebtAndPenalty(uint256 _loanId) public view returns (uint256) {\\r\\n        Loan storage _loan = loans[_loanId];\\r\\n        uint256 paidAmount = _loan.paidAmount;\\r\\n        uint256 _totalDebt = totalDebt(_loanId);\\r\\n        uint256 _penalty = (_loan.loanAsset.amount * penaltyFee) / 1000; // 5% penalty of loan amount\\r\\n        return _totalDebt + _penalty - paidAmount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev User can get back the rest money through this function, but he should pay late fee.\\r\\n     */\\r\\n    function getBackFund(uint256 _loanId) external payable {\\r\\n        Loan storage _loan = loans[_loanId];\\r\\n        require(_msgSender() == _loan.borrower, \\\"TribOne: Forbidden\\\");\\r\\n        require(_loan.status == Status.POSTLIQUIDATION, \\\"TribeOne: Invalid status\\\");\\r\\n        require(_loan.postTime + GRACE_PERIOD > block.timestamp, \\\"TribeOne: Time over\\\");\\r\\n        uint256 _restAmount = _loan.restAmount;\\r\\n        require(_restAmount > 0, \\\"TribeOne: No amount to give back\\\");\\r\\n\\r\\n        if (lateFee > 0) {\\r\\n            uint256 _amount = lateFee * (10**IERC20Metadata(feeCurrency).decimals()); // tenor late fee\\r\\n            TribeOneHelper.safeTransferFrom(feeCurrency, _msgSender(), address(this), _amount);\\r\\n        }\\r\\n\\r\\n        _loan.status = Status.RESTWITHDRAWN;\\r\\n\\r\\n        address _currency = _loan.loanAsset.currency;\\r\\n\\r\\n        if (_currency == address(0)) {\\r\\n            TribeOneHelper.safeTransferETH(_msgSender(), _restAmount);\\r\\n        } else {\\r\\n            TribeOneHelper.safeTransferFrom(_currency, address(this), _msgSender(), _restAmount);\\r\\n        }\\r\\n\\r\\n        emit RestWithdrew(_loanId, _restAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev if user does not want to get back rest of money due to some reasons, such as gas fee...\\r\\n     * we will transfer rest money to our fee address (after 14 days notification).\\r\\n     * For saving gas fee, we will transfer once for the one kind of token.\\r\\n     */\\r\\n\\r\\n    function lockRestAmount(uint256[] calldata _loanIds, address _currency) external nonReentrant {\\r\\n        uint256 len = _loanIds.length;\\r\\n        uint256 _amount = 0;\\r\\n        for (uint256 ii = 0; ii < len; ii++) {\\r\\n            uint256 _loanId = _loanIds[ii];\\r\\n            Loan storage _loan = loans[_loanId];\\r\\n            if (\\r\\n                _loan.loanAsset.currency == _currency &&\\r\\n                _loan.status == Status.POSTLIQUIDATION &&\\r\\n                _loan.postTime + GRACE_PERIOD > block.timestamp\\r\\n            ) {\\r\\n                _amount += _loan.restAmount;\\r\\n                _loan.status = Status.RESTLOCKED;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        TribeOneHelper.safeTransferAsset(_currency, feeTo, _amount);\\r\\n    }\\r\\n\\r\\n    function cancelLoan(uint256 _loanId) external nonReentrant {\\r\\n        Loan storage _loan = loans[_loanId];\\r\\n        require(_loan.borrower == _msgSender() && _loan.status == Status.LISTED, \\\"TribeOne: Forbidden\\\");\\r\\n        _loan.status = Status.CANCELLED;\\r\\n        returnColleteral(_loanId);\\r\\n        emit LoanCanceled(_loanId, _msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev return back collateral to borrower due to some reasons\\r\\n     */\\r\\n    function returnColleteral(uint256 _loanId) private {\\r\\n        Loan storage _loan = loans[_loanId];\\r\\n        address _currency = _loan.collateralAsset.currency;\\r\\n        uint256 _amount = _loan.collateralAsset.amount;\\r\\n        address _to = _loan.borrower;\\r\\n        TribeOneHelper.safeTransferAsset(_currency, _to, _amount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xa41586adbfefaf39b9b7f1b8a2388c9f80e79cf25fe2bd64ef3b7b2cb6af6fb1\",\"license\":\"MIT\"},\"contracts/interfaces/IAssetManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\ninterface IAssetManager {\\n    function isAvailableLoanAsset(address _asset) external returns (bool);\\n\\n    function isAvailableCollateralAsset(address _asset) external returns (bool);\\n\\n    function requestETH(address _to, uint _amount) external;\\n\\n    function requestToken(address _to, address _token, uint _amount) external;\\n}\\n\",\"keccak256\":\"0xbfe773901e3b3f55087bfacdcdc082f11bd88bac940de55e63376e8ef4d69639\",\"license\":\"MIT\"},\"contracts/interfaces/ITribeOne.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\ninterface ITribeOne {\\n    function approveLoan(\\n        uint256 _loanId,\\n        uint256 _amount,\\n        address _agent\\n    ) external;\\n\\n    function relayNFT(\\n        uint256 _loanId,\\n        address _agent,\\n        bool _accepted\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x9b0452c0dc66110e70858ab8623823b0942537a24d42a6dcfa517277b9d41959\",\"license\":\"MIT\"},\"contracts/libraries/TribeOneHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\nlibrary TribeOneHelper {\\n    enum TokenType {\\n        ERC721,\\n        ERC1155\\n    }\\n\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::safeApprove: approve failed\\\");\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TribeOneHelper::safeTransfer: transfer failed\\\");\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TribeOneHelper::transferFrom: transferFrom failed\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"TribeOneHelper::safeTransferETH: ETH transfer failed\\\");\\n    }\\n\\n    function safeTransferAsset(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        if (token == address(0)) {\\n            safeTransferETH(to, value);\\n        } else {\\n            safeTransfer(token, to, value);\\n        }\\n    }\\n\\n    function safeTransferNFT(\\n        address _nft,\\n        address _from,\\n        address _to,\\n        TokenType _type,\\n        uint256 _tokenId\\n    ) internal {\\n        if (_type == TokenType.ERC721) {\\n            IERC721(_nft).safeTransferFrom(_from, _to, _tokenId);\\n        } else {\\n            IERC1155(_nft).safeTransferFrom(_from, _to, _tokenId, 1, \\\"0x00\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev this function calculates expected price of NFT based on created LTV and fund amount,\\n     * LTV: 10000 = 100%; _slippage: 10000 = 100%\\n     */\\n    function getExpectedPrice(\\n        uint256 _fundAmount,\\n        uint256 _LTV,\\n        uint256 _slippage\\n    ) internal pure returns (uint256) {\\n        require(_LTV != 0, \\\"TribeOneHelper: LTV should not be 0\\\");\\n        return (_fundAmount * (10000 + _slippage)) / _LTV;\\n    }\\n}\\n\",\"keccak256\":\"0x220531de717d6dd116529474e0987d15355fd8b66edc9552a21e84faad97042d\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60a06040526101a460045560b46005553480156200001c57600080fd5b506040516200451d3803806200451d8339810160408190526200003f9162000249565b60006200004b62000160565b600080546001600160a01b0319166001600160a01b038316908117825560405192935091600080516020620044fd833981519152908290a350600180556001600160a01b03851615801590620000a957506001600160a01b03841615155b8015620000be57506001600160a01b03831615155b8015620000d357506001600160a01b03821615155b620000fb5760405162461bcd60e51b8152600401620000f29062000333565b60405180910390fd5b600680546001600160a01b038088166001600160a01b0319928316179092556007805484841690831617905560088054928716929091169190911790556001600160601b0319606084901b16608052620001558262000164565b50505050506200036a565b3390565b6200016e62000160565b6001600160a01b0316620001816200021d565b6001600160a01b031614620001aa5760405162461bcd60e51b8152600401620000f290620002fe565b6001600160a01b038116620001d35760405162461bcd60e51b8152600401620000f290620002b8565b600080546040516001600160a01b0380851693921691600080516020620044fd83398151915291a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031690565b80516001600160a01b03811681146200024457600080fd5b919050565b600080600080600060a0868803121562000261578081fd5b6200026c866200022c565b94506200027c602087016200022c565b93506200028c604087016200022c565b92506200029c606087016200022c565b9150620002ac608087016200022c565b90509295509295909350565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526016908201527f54726962654f6e653a205a45524f206164647265737300000000000000000000604082015260600190565b60805160601c614158620003a560003960008181610a5f01528181610b0d0152818161183501528181612651015261271d01526141586000f3fe6080604052600436106102345760003560e01c806394217ad11161012e578063c1a287e2116100ab578063e1ec3c681161006f578063e1ec3c681461062f578063f23a6e6114610667578063f2fde38b14610687578063f87c59cc146106a7578063f9759518146106c75761023b565b8063c1a287e2146105a5578063c22f4610146105ba578063c5b6599f146105da578063c8f87ccb146105ef578063df9eb9381461060f5761023b565b8063b112ea6e116100f2578063b112ea6e14610512578063bc197c8114610532578063bdbfa3de14610552578063bec5740614610572578063bf79b742146105855761023b565b806394217ad1146104a05780639695858f146104b5578063a3ada2d7146104d5578063af8747c2146104ea578063b0aa6808146104fd5761023b565b80633dc10ad4116101bc578063715018a611610180578063715018a614610416578063724732a81461042b578063767ac3691461044b5780637dc830d81461046b5780638da5cb5b1461048b5761023b565b80633dc10ad4146103965780633f4de62f146103ab57806346402a79146103c05780634e248cda146103d35780636028ce9f146103e85761023b565b8063150b7a0211610203578063150b7a02146102da5780631614b2511461030757806321d0393a1461031a578063265e9a4c1461033a5780633a7caf20146103675761023b565b8063017e7e581461024057806301ffc9a71461026b578063023245d7146102985780630309db4a146102ba5761023b565b3661023b57005b600080fd5b34801561024c57600080fd5b506102556106dc565b60405161026291906135a5565b60405180910390f35b34801561027757600080fd5b5061028b610286366004613424565b6106eb565b604051610262919061366d565b3480156102a457600080fd5b506102b86102b336600461346e565b610718565b005b3480156102c657600080fd5b506102b86102d536600461346e565b610759565b3480156102e657600080fd5b506102fa6102f5366004613188565b610962565b6040516102629190613678565b6102b861031536600461346e565b610972565b34801561032657600080fd5b506102b86103353660046134e6565b610bc6565b34801561034657600080fd5b5061035a61035536600461346e565b610e4d565b6040516102629190613df1565b34801561037357600080fd5b5061038761038236600461346e565b610eb1565b60405161026293929190613dd3565b3480156103a257600080fd5b5061035a610ee1565b3480156103b757600080fd5b5061035a610ee7565b6102b86103ce3660046134c5565b610eed565b3480156103df57600080fd5b5061035a61121e565b3480156103f457600080fd5b506104086104033660046134c5565b611224565b604051610262929190613622565b34801561042257600080fd5b506102b86112b8565b34801561043757600080fd5b506102b86104463660046133b6565b611341565b34801561045757600080fd5b506102b86104663660046134c5565b611476565b34801561047757600080fd5b5061035a61048636600461346e565b6114a1565b34801561049757600080fd5b506102556114e1565b3480156104ac57600080fd5b506102556114f0565b3480156104c157600080fd5b506104086104d036600461346e565b6114ff565b3480156104e157600080fd5b50610255611526565b6102b86104f8366004613486565b611535565b34801561050957600080fd5b50610255611833565b34801561051e57600080fd5b5061040861052d36600461346e565b611857565b34801561053e57600080fd5b506102fa61054d3660046130e2565b61187e565b34801561055e57600080fd5b506102b861056d36600461346e565b61188f565b6102b86105803660046134c5565b611990565b34801561059157600080fd5b506102b86105a0366004613251565b611b5e565b3480156105b157600080fd5b5061035a611c68565b3480156105c657600080fd5b5061035a6105d536600461346e565b611c6e565b3480156105e657600080fd5b5061035a611cb8565b3480156105fb57600080fd5b506102b861060a36600461346e565b611cbe565b34801561061b57600080fd5b5061035a61062a36600461346e565b611daf565b34801561063b57600080fd5b5061064f61064a36600461346e565b611dc4565b6040516102629c9b9a99989796959493929190613e08565b34801561067357600080fd5b506102fa6106823660046131ee565b611e93565b34801561069357600080fd5b506102b86106a23660046130c8565b611ea4565b3480156106b357600080fd5b506102b86106c23660046132a7565b611f64565b3480156106d357600080fd5b5061035a612569565b6008546001600160a01b031681565b60006001600160e01b03198216630271189760e51b148061071057506107108261256f565b90505b919050565b600260015414156107445760405162461bcd60e51b815260040161073b90613cc2565b60405180910390fd5b600260015561075281612588565b5060018055565b6002600154141561077c5760405162461bcd60e51b815260040161073b90613cc2565b600260018190556000828152602091909152604090206008600a82015460ff16600c8111156107bb57634e487b7160e01b600052602160045260246000fd5b146107d85760405162461bcd60e51b815260040161073b90613b28565b426005546107e5846114a1565b6107ef9190613f20565b1061080c5760405162461bcd60e51b815260040161073b90613d48565b600a8101805460ff19166009179055600c81015460005b8181101561091357600083600c01828154811061085057634e487b7160e01b600052603260045260246000fd5b6000918252602082200154600d860180546001600160a01b039092169350908490811061088d57634e487b7160e01b600052603260045260246000fd5b906000526020600020015490506108fe8230600660009054906101000a90046001600160a01b031688600e0187815481106108d857634e487b7160e01b600052603260045260246000fd5b90600052602060002090602091828204019190069054906101000a900460ff168561283e565b5050808061090b906140ca565b915050610823565b5060065460405184917fff6f4651f4fd73446c5a7a4c5eaa2b05686ad05806a08db92d320fd0e4df77ef91610951916001600160a01b0316906135a5565b60405180910390a250506001805550565b630a85bd0160e11b949350505050565b600081815260026020526040902060058101546001600160a01b031661099661293a565b6001600160a01b0316146109bc5760405162461bcd60e51b815260040161073b90613a0e565b600a8082015460ff16600c8111156109e457634e487b7160e01b600052602160045260246000fd5b14610a015760405162461bcd60e51b815260040161073b90613b28565b426005548260030154610a149190613f20565b11610a315760405162461bcd60e51b815260040161073b906139e1565b600481015480610a535760405162461bcd60e51b815260040161073b906137c3565b60095415610b3d5760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610ab657600080fd5b505afa158015610aca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aee9190613511565b610af990600a613fc3565b600954610b069190614094565b9050610b3b7f0000000000000000000000000000000000000000000000000000000000000000610b3461293a565b308461293e565b505b600a8201805460ff1916600b17905560078201546001600160a01b031680610b7557610b70610b6a61293a565b83612a2e565b610b88565b610b888130610b8261293a565b8561293e565b837f54c34e2467de11ba056e6efc24455400a417eee8270ce874c1b548f0974ed59483604051610bb89190613df1565b60405180910390a250505050565b610bce61293a565b6001600160a01b0316610bdf6114e1565b6001600160a01b031614610c055760405162461bcd60e51b815260040161073b90613abc565b60026001541415610c285760405162461bcd60e51b815260040161073b90613cc2565b600260018181556000858152602092909252604090912090600a82015460ff16600c811115610c6757634e487b7160e01b600052602160045260246000fd5b14610c845760405162461bcd60e51b815260040161073b90613955565b6001600160a01b038216610caa5760405162461bcd60e51b815260040161073b90613c14565b8054600b82015462010000900461ffff166000610cca83836101f4612ac0565b905080861115610cec5760405162461bcd60e51b815260040161073b90613b5f565b600a8401805460ff19166002179055600784015484546001600160a01b0390911690610d1890886140b3565b60068601556001600160a01b038116610d9457600754604051636f59503f60e01b81526001600160a01b0390911690636f59503f90610d5d9089908b90600401613622565b600060405180830381600087803b158015610d7757600080fd5b505af1158015610d8b573d6000803e3d6000fd5b50505050610dfb565b6007546040516324b28b1560e11b81526001600160a01b0390911690634965162a90610dc890899085908c906004016135b9565b600060405180830381600087803b158015610de257600080fd5b505af1158015610df6573d6000803e3d6000fd5b505050505b856001600160a01b0316887f5a2849283d692c6535b240a67d3be009f99e4c8c66a13e5238ecfe2ecd9e8f65838a604051610e37929190613622565b60405180910390a3505060018055505050505050565b6000818152600260205260408120600181015482610e6a85611c6e565b905060006103e8600a548560060160000154610e869190614094565b610e909190613f5d565b905082610e9d8284613f20565b610ea791906140b3565b9695505050505050565b6000908152600260205260409020600b015461ffff80821692620100008304821692640100000000900490911690565b600a5481565b60095481565b60026001541415610f105760405162461bcd60e51b815260040161073b90613cc2565b600260018190556000838152602091909152604090206003600a82015460ff16600c811115610f4f57634e487b7160e01b600052602160045260246000fd5b1480610f8157506008600a82015460ff16600c811115610f7f57634e487b7160e01b600052602160045260246000fd5b145b610f9d5760405162461bcd60e51b815260040161073b90613b28565b6000610fa884612b08565b60078301549091506001600160a01b031680610fc2573493505b60018301546000610fd287611c6e565b600b86015490915060009061ffff16610feb8684614094565b610ff59190613f5d565b9050806110028885613f20565b10156110205760405162461bcd60e51b815260040161073b90613b96565b61102988612b64565b506000816110378885613f20565b111561105557816110488885613f20565b61105291906140b3565b90505b61105f81886140b3565b96506001600160a01b0384166110a15780156110865761108661108061293a565b82612a2e565b60075461109c906001600160a01b031688612a2e565b6110bf565b6110bf846110ad61293a565b6007546001600160a01b03168a61293e565b868660010160008282546110d39190613f20565b9091555050600b860154600187015460009184916110f59161ffff1690614094565b6110ff9190613f5d565b6005880154909150600160a81b900460ff168111156111335760058701805460ff60a81b1916600160a81b60ff8416021790555b6008600a88015460ff16600c81111561115c57634e487b7160e01b600052602160045260246000fd5b141561117257600a8701805460ff191660031790555b8261117d8986613f20565b14156111d357600a8701805460ff1916600417905561119a61293a565b60058801546001600160a01b0390811691161480156111c557506005870154600160a01b900460ff16155b156111d3576111d389612588565b887f337875b31ca148911f20ebb44d810f124d810dd362ca3065c8591e09b3fb73f533878b604051611207939291906135b9565b60405180910390a250506001805550505050505050565b60045481565b6000828152600260205260408120600c0180548291908490811061125857634e487b7160e01b600052603260045260246000fd5b600091825260208083209091015486835260029091526040909120600d0180546001600160a01b03909216935090849081106112a457634e487b7160e01b600052603260045260246000fd5b906000526020600020015490509250929050565b6112c061293a565b6001600160a01b03166112d16114e1565b6001600160a01b0316146112f75760405162461bcd60e51b815260040161073b90613abc565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b600260015414156113645760405162461bcd60e51b815260040161073b90613cc2565b6002600155816000805b8281101561145257600086868381811061139857634e487b7160e01b600052603260045260246000fd5b602090810292909201356000818152600290935260409092206007810154929350916001600160a01b03888116911614905080156113fb5750600a8082015460ff16600c8111156113f957634e487b7160e01b600052602160045260246000fd5b145b801561141757504260055482600301546114159190613f20565b115b1561143d57600481015461142b9085613f20565b600a8201805460ff1916600c17905593505b5050808061144a906140ca565b91505061136e565b5060085461146b9084906001600160a01b031683612c6f565b505060018055505050565b33736c641ce6a7216f12d28692f9d8b2bdcde812ed2b1461149657600080fd5b600491909155600555565b600081815260026020526040812060058101546004546114cb91600160a81b900460ff1690614094565b81600201546114da9190613f20565b9392505050565b6000546001600160a01b031690565b6007546001600160a01b031681565b600090815260026020526040902060078101546006909101546001600160a01b0390911691565b6006546001600160a01b031681565b61153d61293a565b6001600160a01b031661154e6114e1565b6001600160a01b0316146115745760405162461bcd60e51b815260040161073b90613abc565b600260015414156115975760405162461bcd60e51b815260040161073b90613cc2565b60026001819055600084815260208290526040902090600a82015460ff16600c8111156115d457634e487b7160e01b600052602160045260246000fd5b146115f15760405162461bcd60e51b815260040161073b90613711565b6001600160a01b0383166116175760405162461bcd60e51b815260040161073b90613c14565b811561173f57600c81015460005b818110156116fb576116e983600c01828154811061165357634e487b7160e01b600052603260045260246000fd5b9060005260206000200160009054906101000a90046001600160a01b0316863086600e01858154811061169657634e487b7160e01b600052603260045260246000fd5b90600052602060002090602091828204019190069054906101000a900460ff1687600d0186815481106116d957634e487b7160e01b600052603260045260246000fd5b906000526020600020015461283e565b806116f3816140ca565b915050611625565b50600a8201805460ff19166003179055426002830155600982015460088301546007546001600160a01b03928316926117379184911683612c6f565b5050506117e7565b600a8101805460ff191660069081179091556007820154908201546001600160a01b0390911690816117c1578034101561178b5760405162461bcd60e51b815260040161073b90613af1565b803411156117a6576117a6856117a183346140b3565b612a2e565b6007546117bc906001600160a01b031682612a2e565b6117db565b6007546117db90839087906001600160a01b03168461293e565b6117e486612c97565b50505b826001600160a01b0316847f7aaf993782070c73bb2987e6cd8e60d71f407e727a8c44101a341680260ff50084604051611821919061366d565b60405180910390a35050600180555050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600090815260026020526040902060098101546008909101546001600160a01b0390911691565b63bc197c8160e01b95945050505050565b600260015414156118b25760405162461bcd60e51b815260040161073b90613cc2565b600260018190556000828152602091909152604090206118d061293a565b60058201546001600160a01b03908116911614801561191557506001600a82015460ff16600c81111561191357634e487b7160e01b600052602160045260246000fd5b145b6119315760405162461bcd60e51b815260040161073b90613c44565b600a8101805460ff1916600717905561194982612c97565b817fd7c51777aa8fac36ec01ee3c9f7e62a08837a6f6074d0d02d94ce108b3ae931161197361293a565b60405161198091906135a5565b60405180910390a2505060018055565b600260015414156119b35760405162461bcd60e51b815260040161073b90613cc2565b60026001556006546001600160a01b03166119cc61293a565b6001600160a01b0316146119f25760405162461bcd60e51b815260040161073b90613c44565b60008281526002602052604090206009600a82015460ff16600c811115611a2957634e487b7160e01b600052602160045260246000fd5b14611a465760405162461bcd60e51b815260040161073b90613a3a565b60078101546001600160a01b03168015611a605782611a62565b345b92506000611a6f85610e4d565b90506001600160a01b038216611aac57808411611a8c5783611a8e565b805b600854909150611aa7906001600160a01b031682612a2e565b611ae9565b611abf82611ab861293a565b308761293e565b808411611acc5783611ace565b805b600854909150611ae99083906001600160a01b031683612ccc565b600a838101805460ff1916909117905580841115611b1157611b0b81856140b3565b60048401555b42600384015560405185907fb05ced90bd7d793d66e9da2b341f252ee2aeb662ca3680be0d5e73bab4f8da6790611b4b9087908590613dfa565b60405180910390a2505060018055505050565b611b6661293a565b6001600160a01b0316611b776114e1565b6001600160a01b031614611b9d5760405162461bcd60e51b815260040161073b90613abc565b6001600160a01b03821615801590611bbd57506001600160a01b03851615155b611bd95760405162461bcd60e51b815260040161073b90613c14565b600880546001600160a01b038088166001600160a01b0319928316179092556009869055600a8590556006805485841690831617905560078054848416921691909117908190556040517f7229d407fca4e1dddfa1d0522b2690427047eb8ab00d60ced49f011bcc39a14192611c5992899289928992899291169061363b565b60405180910390a15050505050565b60055481565b6000818152600260205260408120600b81015461271090611c9b90640100000000900461ffff1682613efa565b6006830154611cae9161ffff1690614094565b6114da9190613f5d565b60035481565b60026001541415611ce15760405162461bcd60e51b815260040161073b90613cc2565b600260018190556000828152602091909152604090206003600a82015460ff16600c811115611d2057634e487b7160e01b600052602160045260246000fd5b14611d3d5760405162461bcd60e51b815260040161073b90613b28565b42611d47836114a1565b10611d645760405162461bcd60e51b815260040161073b90613d48565b611d6d82612b64565b600a8101805460ff1916600817905560405182907f0789b7097e8066538cfaa1132488b132e14ba5f0c938c8b7aaf8cf40356aab0b90600090a2505060018055565b6000908152600260205260409020600c015490565b60026020818152600092835260409283902080546001820154938201546003830154600484015460058501548851808a018a526006870154815260078701546001600160a01b03908116828a01528a51808c018c526008890154815260098901548216818b0152600a8901548c51606081018e52600b909a015461ffff8082168c5262010000820481169c8c019c909c526401000000009004909a169b89019b909b52959994979396929582169460ff600160a01b8404811695600160a81b909404811694929391929116908c565b63f23a6e6160e01b95945050505050565b611eac61293a565b6001600160a01b0316611ebd6114e1565b6001600160a01b031614611ee35760405162461bcd60e51b815260040161073b90613abc565b6001600160a01b038116611f095760405162461bcd60e51b815260040161073b90613748565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b60038a148015611f745750600284145b611f905760405162461bcd60e51b815260040161073b906138d1565b60008b8b6000818110611fb357634e487b7160e01b600052603260045260246000fd5b9050602002016020810190611fc8919061344c565b905060008c8c6001818110611fed57634e487b7160e01b600052603260045260246000fd5b9050602002016020810190612002919061344c565b905060008d8d600281811061202757634e487b7160e01b600052603260045260246000fd5b905060200201602081019061203c919061344c565b905060008e8e600181811061206157634e487b7160e01b600052603260045260246000fd5b9050602002016020810190612076919061344c565b61ffff16116120975760405162461bcd60e51b815260040161073b9061378e565b60008e8e60008181106120ba57634e487b7160e01b600052603260045260246000fd5b90506020020160208101906120cf919061344c565b61ffff16116120f05760405162461bcd60e51b815260040161073b90613cf9565b8861210d5760405162461bcd60e51b815260040161073b90613bcd565b60008c8c600181811061213057634e487b7160e01b600052603260045260246000fd5b905060200201602081019061214591906130c8565b905060008d8d600081811061216a57634e487b7160e01b600052603260045260246000fd5b905060200201602081019061217f91906130c8565b60075460405163cc16574160e01b81529192506001600160a01b03169063cc165741906121b09084906004016135a5565b602060405180830381600087803b1580156121ca57600080fd5b505af11580156121de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122029190613408565b61221e5760405162461bcd60e51b815260040161073b90613855565b6007546040516308409d7760e01b81526001600160a01b03909116906308409d779061224e9085906004016135a5565b602060405180830381600087803b15801561226857600080fd5b505af115801561227c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122a09190613408565b6122bc5760405162461bcd60e51b815260040161073b90613a71565b806001600160a01b0316826001600160a01b0316141580156122e657506001600160a01b03821615155b6123025760405162461bcd60e51b815260040161073b906136d0565b8a871480156123115750855187145b61232d5760405162461bcd60e51b815260040161073b906137f8565b6123376003612db2565b60006123436003612dbb565b905060008b8b600081811061236857634e487b7160e01b600052603260045260246000fd5b90506020020135905060008c8c600181811061239457634e487b7160e01b600052603260045260246000fd5b9050602002013590506123a985610b3461293a565b8e8e60026000868152602001908152602001600020600c0191906123ce929190612dbf565b506123d761293a565b60008481526002602081815260408084206005810180546001600160a01b039788166001600160a01b031991821617909155825180840184528681528b88168186019081528b88528686529051600684015551600783018054918916918316919091179055825180840184528881528c88168186019081528b8852868652905160088401555160098301805491909816911617909555805160608101825261ffff808f1682528d81168285019081528d8216938301938452958a9052939092529051600b850180549451925184166401000000000265ffff0000000019938516620100000263ffff0000199390951661ffff19909616959095179190911692909217169190911790556124ee90600d018c8c612e22565b506000838152600260209081526040909120838155600a8101805460ff191660011790558a5161252692600e909201918c0190612e5d565b50604051339084907f1e6e02c9589612d091b6d88e3f0a4af8853df1573895d33dc5bd10f27bfbc59790600090a350505050505050505050505050505050505050565b6101f481565b6001600160e01b031981166301ffc9a760e01b14919050565b60008181526002602052604090206004600a82015460ff16600c8111156125bf57634e487b7160e01b600052602160045260246000fd5b146125dc5760405162461bcd60e51b815260040161073b9061398c565b60006125e661293a565b60058301549091506001600160a01b038083169116146126185760405162461bcd60e51b815260040161073b90613c44565b600a8201805460ff1916600590811790915582015460ff600160a01b909104161580159061264857506000600954115b156127505760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156126a857600080fd5b505afa1580156126bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126e09190613511565b6126eb90600a613fc3565b60095460058501546127079190600160a01b900460ff16614094565b6127119190614094565b60085490915061274e907f00000000000000000000000000000000000000000000000000000000000000009084906001600160a01b03168461293e565b505b600c82015460005b8181101561280d57600084600c01828154811061278557634e487b7160e01b600052603260045260246000fd5b6000918252602082200154600d870180546001600160a01b03909216935090849081106127c257634e487b7160e01b600052603260045260246000fd5b906000526020600020015490506127f882308789600e0187815481106108d857634e487b7160e01b600052603260045260246000fd5b50508080612805906140ca565b915050612758565b50837f4459793bb7ed080476f037ed5016eb5366299d029547cdb92e50d4b18cf9d49283604051610bb891906135a5565b600082600181111561286057634e487b7160e01b600052602160045260246000fd5b14156128cd57604051632142170760e11b81526001600160a01b038616906342842e0e90612896908790879086906004016135b9565b600060405180830381600087803b1580156128b057600080fd5b505af11580156128c4573d6000803e3d6000fd5b50505050612933565b604051637921219560e11b81526001600160a01b0386169063f242432a90612900908790879086906001906004016135dd565b600060405180830381600087803b15801561291a57600080fd5b505af115801561292e573d6000803e3d6000fd5b505050505b5050505050565b3390565b600080856001600160a01b03166323b872dd868686604051602401612965939291906135b9565b6040516020818303038152906040529060e01b6020820180516001600160e01b03838183161783525050505060405161299e919061356c565b6000604051808303816000865af19150503d80600081146129db576040519150601f19603f3d011682016040523d82523d6000602084013e6129e0565b606091505b5091509150818015612a0a575080511580612a0a575080806020019051810190612a0a9190613408565b612a265760405162461bcd60e51b815260040161073b90613c71565b505050505050565b604080516000808252602082019092526001600160a01b038416908390604051612a58919061356c565b60006040518083038185875af1925050503d8060008114612a95576040519150601f19603f3d011682016040523d82523d6000602084013e612a9a565b606091505b5050905080612abb5760405162461bcd60e51b815260040161073b90613d7f565b505050565b600082612adf5760405162461bcd60e51b815260040161073b9061368d565b82612aec83612710613f20565b612af69086614094565b612b009190613f5d565b949350505050565b6000818152600260208190526040822001546004548290612b2983426140b3565b612b339190613f5d565b6000858152600260205260409020600b015490915061ffff16808211612b595781612b5b565b805b95945050505050565b60008181526002602052604090206003600a82015460ff16600c811115612b9b57634e487b7160e01b600052602160045260246000fd5b1480612bcd57506008600a82015460ff16600c811115612bcb57634e487b7160e01b600052602160045260246000fd5b145b612be95760405162461bcd60e51b815260040161073b9061389a565b6000612bf483612b08565b6005830154909150600160a81b900460ff1680821115612c695760058301805460ff60a81b1916600160a81b60ff851602179055612c3281836140b3565b600584018054601490612c50908490600160a01b900460ff16613f38565b92506101000a81548160ff021916908360ff1602179055505b50505050565b6001600160a01b038316612c8c57612c878282612a2e565b612abb565b612abb838383612ccc565b60008181526002602052604090206009810154600882015460058301546001600160a01b039283169216612933838284612c6f565b600080846001600160a01b031663a9059cbb8585604051602401612cf1929190613622565b6040516020818303038152906040529060e01b6020820180516001600160e01b038381831617835250505050604051612d2a919061356c565b6000604051808303816000865af19150503d8060008114612d67576040519150601f19603f3d011682016040523d82523d6000602084013e612d6c565b606091505b5091509150818015612d96575080511580612d96575080806020019051810190612d969190613408565b6129335760405162461bcd60e51b815260040161073b90613908565b80546001019055565b5490565b828054828255906000526020600020908101928215612e12579160200282015b82811115612e125781546001600160a01b0319166001600160a01b03843516178255602090920191600190910190612ddf565b50612e1e929150612f16565b5090565b828054828255906000526020600020908101928215612e12579160200282015b82811115612e12578235825591602001919060010190612e42565b82805482825590600052602060002090601f01602090048101928215612e125791602002820160005b83821115612ee057835183826101000a81548160ff02191690836001811115612ebf57634e487b7160e01b600052602160045260246000fd5b02179055509260200192600101602081600001049283019260010302612e86565b8015612f0d5782816101000a81549060ff0219169055600101602081600001049283019260010302612ee0565b5050612e1e9291505b5b80821115612e1e5760008155600101612f17565b80356001600160a01b038116811461071357600080fd5b60008083601f840112612f53578182fd5b50813567ffffffffffffffff811115612f6a578182fd5b6020830191508360208083028501011115612f8457600080fd5b9250929050565b600082601f830112612f9b578081fd5b81356020612fb0612fab83613ed6565b613eac565b8281528181019085830183850287018401881015612fcc578586fd5b855b85811015612ff657813560028110612fe4578788fd5b84529284019290840190600101612fce565b5090979650505050505050565b600082601f830112613013578081fd5b81356020613023612fab83613ed6565b828152818101908583018385028701840188101561303f578586fd5b855b85811015612ff657813584529284019290840190600101613041565b600082601f83011261306d578081fd5b813567ffffffffffffffff811115613087576130876140fb565b61309a601f8201601f1916602001613eac565b8181528460208386010111156130ae578283fd5b816020850160208301379081016020019190915292915050565b6000602082840312156130d9578081fd5b6114da82612f2b565b600080600080600060a086880312156130f9578081fd5b61310286612f2b565b945061311060208701612f2b565b9350604086013567ffffffffffffffff8082111561312c578283fd5b61313889838a01613003565b9450606088013591508082111561314d578283fd5b61315989838a01613003565b9350608088013591508082111561316e578283fd5b5061317b8882890161305d565b9150509295509295909350565b6000806000806080858703121561319d578384fd5b6131a685612f2b565b93506131b460208601612f2b565b925060408501359150606085013567ffffffffffffffff8111156131d6578182fd5b6131e28782880161305d565b91505092959194509250565b600080600080600060a08688031215613205578081fd5b61320e86612f2b565b945061321c60208701612f2b565b93506040860135925060608601359150608086013567ffffffffffffffff811115613245578182fd5b61317b8882890161305d565b600080600080600060a08688031215613268578081fd5b61327186612f2b565b9450602086013593506040860135925061328d60608701612f2b565b915061329b60808701612f2b565b90509295509295909350565b600080600080600080600080600080600060c08c8e0312156132c7578889fd5b67ffffffffffffffff808d3511156132dd57898afd5b6132ea8e8e358f01612f42565b909c509a5060208d01358110156132ff57898afd5b61330f8e60208f01358f01612f42565b909a50985060408d0135811015613324578687fd5b6133348e60408f01358f01612f42565b909850965060608d0135811015613349578586fd5b6133598e60608f01358f01612f42565b909650945060808d013581101561336e578384fd5b61337e8e60808f01358f01612f42565b909450925060a08d0135811015613393578182fd5b506133a48d60a08e01358e01612f8b565b90509295989b509295989b9093969950565b6000806000604084860312156133ca578081fd5b833567ffffffffffffffff8111156133e0578182fd5b6133ec86828701612f42565b90945092506133ff905060208501612f2b565b90509250925092565b600060208284031215613419578081fd5b81516114da81614111565b600060208284031215613435578081fd5b81356001600160e01b0319811681146114da578182fd5b60006020828403121561345d578081fd5b813561ffff811681146114da578182fd5b60006020828403121561347f578081fd5b5035919050565b60008060006060848603121561349a578081fd5b833592506134aa60208501612f2b565b915060408401356134ba81614111565b809150509250925092565b600080604083850312156134d7578182fd5b50508035926020909101359150565b6000806000606084860312156134fa578081fd5b83359250602084013591506133ff60408501612f2b565b600060208284031215613522578081fd5b815160ff811681146114da578182fd5b805182526020908101516001600160a01b0316910152565b805161ffff908116835260208083015182169084015260409182015116910152565b60008251815b8181101561358c5760208186018101518583015201613572565b8181111561359a5782828501525b509190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0394851681529290931660208301526040820152606081019190915260a060808201819052600490820152630307830360e41b60c082015260e00190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0395861681526020810194909452604084019290925283166060830152909116608082015260a00190565b901515815260200190565b6001600160e01b031991909116815260200190565b60208082526023908201527f54726962654f6e6548656c7065723a204c54562073686f756c64206e6f74206260408201526206520360ec1b606082015260800190565b60208082526021908201527f54726962654f6e653a2057726f6e6720636f6c6c61746572616c2061737365746040820152607360f81b606082015260800190565b6020808252601b908201527f54726962654f6e653a204e6f7420617070726f766564206c6f616e0000000000604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252818101527f54726962654f6e653a204c54562073686f756c64206e6f74206265205a45524f604082015260600190565b6020808252818101527f54726962654f6e653a204e6f20616d6f756e7420746f2067697665206261636b604082015260600190565b6020808252603d908201527f54726962654f6e653a204e46542070726f766964656420696e666f726d61746960408201527f6f6e7320617265206d697373696e67206f7220696e636f6d706c657465000000606082015260800190565b60208082526025908201527f54726962654f6e653a204c6f616e206173736574206973206e6f7420617661696040820152646c61626c6560d81b606082015260800190565b6020808252601a908201527f54726962654f6e653a204e6f742061637469766564206c6f616e000000000000604082015260600190565b6020808252601b908201527f54726962654f6e653a20496e76616c696420706172616d657465720000000000604082015260600190565b6020808252602d908201527f54726962654f6e6548656c7065723a3a736166655472616e736665723a20747260408201526c185b9cd9995c8819985a5b1959609a1b606082015260800190565b60208082526019908201527f54726962654f6e653a20496e76616c6964207265717565737400000000000000604082015260600190565b60208082526035908201527f54726962654f6e653a20496e76616c696420737461747573202d20796f752068604082015274617665207374696c6c206465627420746f2070617960581b606082015260800190565b6020808252601390820152722a3934b132a7b7329d102a34b6b29037bb32b960691b604082015260600190565b6020808252601290820152712a3934b127b7329d102337b93134b23232b760711b604082015260600190565b60208082526018908201527f54726962654f6e653a20696e76616c6964207374617475730000000000000000604082015260600190565b6020808252602b908201527f54726962654f6e653a20436f6c6c61746572616c206173736574206973206e6f60408201526a7420617661696c61626c6560a81b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601f908201527f54726962654f6e653a204c657373207468616e206c6f616e20616d6f756e7400604082015260600190565b60208082526018908201527f54726962654f6e653a20496e76616c6964207374617475730000000000000000604082015260600190565b60208082526018908201527f54726962654f6e653a20496e76616c696420616d6f756e740000000000000000604082015260600190565b6020808252601d908201527f54726962654f6e653a20496e73756666696369656e7420416d6f756e74000000604082015260600190565b60208082526027908201527f54726962654f6e653a204c6f616e206d7573742068617665206174206c6561736040820152661d080c4813919560ca1b606082015260800190565b60208082526016908201527554726962654f6e653a205a45524f206164647265737360501b604082015260600190565b6020808252601390820152722a3934b132a7b7329d102337b93134b23232b760691b604082015260600190565b60208082526031908201527f54726962654f6e6548656c7065723a3a7472616e7366657246726f6d3a207472604082015270185b9cd9995c919c9bdb4819985a5b1959607a1b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252602f908201527f54726962654f6e653a204c6f616e206d7573742068617665206174206c65617360408201526e1d080c481a5b9cdd185b1b1b595b9d608a1b606082015260800190565b6020808252601f908201527f54726962654f6e653a204e6f74206f7665726475656420646174652079657400604082015260600190565b60208082526034908201527f54726962654f6e6548656c7065723a3a736166655472616e736665724554483a60408201527308115512081d1c985b9cd9995c8819985a5b195960621b606082015260800190565b61ffff93841681529183166020830152909116604082015260600190565b90815260200190565b918252602082015260400190565b8c8152602081018c9052604081018b9052606081018a9052608081018990526001600160a01b03881660a082015260ff87811660c0830152861660e08201526102008101613e5a610100830187613532565b613e68610140830186613532565b600d8410613e8657634e487b7160e01b600052602160045260246000fd5b83610180830152613e9b6101a083018461354a565b9d9c50505050505050505050505050565b60405181810167ffffffffffffffff81118282101715613ece57613ece6140fb565b604052919050565b600067ffffffffffffffff821115613ef057613ef06140fb565b5060209081020190565b600061ffff808316818516808303821115613f1757613f176140e5565b01949350505050565b60008219821115613f3357613f336140e5565b500190565b600060ff821660ff84168060ff03821115613f5557613f556140e5565b019392505050565b600082613f7857634e487b7160e01b81526012600452602481fd5b500490565b80825b6001808611613f8f5750613fba565b818704821115613fa157613fa16140e5565b80861615613fae57918102915b9490941c938002613f80565b94509492505050565b60006114da60001960ff851684600082613fdf575060016114da565b81613fec575060006114da565b8160018114614002576002811461400c57614039565b60019150506114da565b60ff84111561401d5761401d6140e5565b6001841b915084821115614033576140336140e5565b506114da565b5060208310610133831016604e8410600b841016171561406c575081810a83811115614067576140676140e5565b6114da565b6140798484846001613f7d565b80860482111561408b5761408b6140e5565b02949350505050565b60008160001904831182151516156140ae576140ae6140e5565b500290565b6000828210156140c5576140c56140e5565b500390565b60006000198214156140de576140de6140e5565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b801515811461411f57600080fd5b5056fea26469706673582212205e6b17d126340b9c3a70aff9b891f82061e0c223c87e016074fa22176bc1401764736f6c634300080000338be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
  "deployedBytecode": "0x6080604052600436106102345760003560e01c806394217ad11161012e578063c1a287e2116100ab578063e1ec3c681161006f578063e1ec3c681461062f578063f23a6e6114610667578063f2fde38b14610687578063f87c59cc146106a7578063f9759518146106c75761023b565b8063c1a287e2146105a5578063c22f4610146105ba578063c5b6599f146105da578063c8f87ccb146105ef578063df9eb9381461060f5761023b565b8063b112ea6e116100f2578063b112ea6e14610512578063bc197c8114610532578063bdbfa3de14610552578063bec5740614610572578063bf79b742146105855761023b565b806394217ad1146104a05780639695858f146104b5578063a3ada2d7146104d5578063af8747c2146104ea578063b0aa6808146104fd5761023b565b80633dc10ad4116101bc578063715018a611610180578063715018a614610416578063724732a81461042b578063767ac3691461044b5780637dc830d81461046b5780638da5cb5b1461048b5761023b565b80633dc10ad4146103965780633f4de62f146103ab57806346402a79146103c05780634e248cda146103d35780636028ce9f146103e85761023b565b8063150b7a0211610203578063150b7a02146102da5780631614b2511461030757806321d0393a1461031a578063265e9a4c1461033a5780633a7caf20146103675761023b565b8063017e7e581461024057806301ffc9a71461026b578063023245d7146102985780630309db4a146102ba5761023b565b3661023b57005b600080fd5b34801561024c57600080fd5b506102556106dc565b60405161026291906135a5565b60405180910390f35b34801561027757600080fd5b5061028b610286366004613424565b6106eb565b604051610262919061366d565b3480156102a457600080fd5b506102b86102b336600461346e565b610718565b005b3480156102c657600080fd5b506102b86102d536600461346e565b610759565b3480156102e657600080fd5b506102fa6102f5366004613188565b610962565b6040516102629190613678565b6102b861031536600461346e565b610972565b34801561032657600080fd5b506102b86103353660046134e6565b610bc6565b34801561034657600080fd5b5061035a61035536600461346e565b610e4d565b6040516102629190613df1565b34801561037357600080fd5b5061038761038236600461346e565b610eb1565b60405161026293929190613dd3565b3480156103a257600080fd5b5061035a610ee1565b3480156103b757600080fd5b5061035a610ee7565b6102b86103ce3660046134c5565b610eed565b3480156103df57600080fd5b5061035a61121e565b3480156103f457600080fd5b506104086104033660046134c5565b611224565b604051610262929190613622565b34801561042257600080fd5b506102b86112b8565b34801561043757600080fd5b506102b86104463660046133b6565b611341565b34801561045757600080fd5b506102b86104663660046134c5565b611476565b34801561047757600080fd5b5061035a61048636600461346e565b6114a1565b34801561049757600080fd5b506102556114e1565b3480156104ac57600080fd5b506102556114f0565b3480156104c157600080fd5b506104086104d036600461346e565b6114ff565b3480156104e157600080fd5b50610255611526565b6102b86104f8366004613486565b611535565b34801561050957600080fd5b50610255611833565b34801561051e57600080fd5b5061040861052d36600461346e565b611857565b34801561053e57600080fd5b506102fa61054d3660046130e2565b61187e565b34801561055e57600080fd5b506102b861056d36600461346e565b61188f565b6102b86105803660046134c5565b611990565b34801561059157600080fd5b506102b86105a0366004613251565b611b5e565b3480156105b157600080fd5b5061035a611c68565b3480156105c657600080fd5b5061035a6105d536600461346e565b611c6e565b3480156105e657600080fd5b5061035a611cb8565b3480156105fb57600080fd5b506102b861060a36600461346e565b611cbe565b34801561061b57600080fd5b5061035a61062a36600461346e565b611daf565b34801561063b57600080fd5b5061064f61064a36600461346e565b611dc4565b6040516102629c9b9a99989796959493929190613e08565b34801561067357600080fd5b506102fa6106823660046131ee565b611e93565b34801561069357600080fd5b506102b86106a23660046130c8565b611ea4565b3480156106b357600080fd5b506102b86106c23660046132a7565b611f64565b3480156106d357600080fd5b5061035a612569565b6008546001600160a01b031681565b60006001600160e01b03198216630271189760e51b148061071057506107108261256f565b90505b919050565b600260015414156107445760405162461bcd60e51b815260040161073b90613cc2565b60405180910390fd5b600260015561075281612588565b5060018055565b6002600154141561077c5760405162461bcd60e51b815260040161073b90613cc2565b600260018190556000828152602091909152604090206008600a82015460ff16600c8111156107bb57634e487b7160e01b600052602160045260246000fd5b146107d85760405162461bcd60e51b815260040161073b90613b28565b426005546107e5846114a1565b6107ef9190613f20565b1061080c5760405162461bcd60e51b815260040161073b90613d48565b600a8101805460ff19166009179055600c81015460005b8181101561091357600083600c01828154811061085057634e487b7160e01b600052603260045260246000fd5b6000918252602082200154600d860180546001600160a01b039092169350908490811061088d57634e487b7160e01b600052603260045260246000fd5b906000526020600020015490506108fe8230600660009054906101000a90046001600160a01b031688600e0187815481106108d857634e487b7160e01b600052603260045260246000fd5b90600052602060002090602091828204019190069054906101000a900460ff168561283e565b5050808061090b906140ca565b915050610823565b5060065460405184917fff6f4651f4fd73446c5a7a4c5eaa2b05686ad05806a08db92d320fd0e4df77ef91610951916001600160a01b0316906135a5565b60405180910390a250506001805550565b630a85bd0160e11b949350505050565b600081815260026020526040902060058101546001600160a01b031661099661293a565b6001600160a01b0316146109bc5760405162461bcd60e51b815260040161073b90613a0e565b600a8082015460ff16600c8111156109e457634e487b7160e01b600052602160045260246000fd5b14610a015760405162461bcd60e51b815260040161073b90613b28565b426005548260030154610a149190613f20565b11610a315760405162461bcd60e51b815260040161073b906139e1565b600481015480610a535760405162461bcd60e51b815260040161073b906137c3565b60095415610b3d5760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610ab657600080fd5b505afa158015610aca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aee9190613511565b610af990600a613fc3565b600954610b069190614094565b9050610b3b7f0000000000000000000000000000000000000000000000000000000000000000610b3461293a565b308461293e565b505b600a8201805460ff1916600b17905560078201546001600160a01b031680610b7557610b70610b6a61293a565b83612a2e565b610b88565b610b888130610b8261293a565b8561293e565b837f54c34e2467de11ba056e6efc24455400a417eee8270ce874c1b548f0974ed59483604051610bb89190613df1565b60405180910390a250505050565b610bce61293a565b6001600160a01b0316610bdf6114e1565b6001600160a01b031614610c055760405162461bcd60e51b815260040161073b90613abc565b60026001541415610c285760405162461bcd60e51b815260040161073b90613cc2565b600260018181556000858152602092909252604090912090600a82015460ff16600c811115610c6757634e487b7160e01b600052602160045260246000fd5b14610c845760405162461bcd60e51b815260040161073b90613955565b6001600160a01b038216610caa5760405162461bcd60e51b815260040161073b90613c14565b8054600b82015462010000900461ffff166000610cca83836101f4612ac0565b905080861115610cec5760405162461bcd60e51b815260040161073b90613b5f565b600a8401805460ff19166002179055600784015484546001600160a01b0390911690610d1890886140b3565b60068601556001600160a01b038116610d9457600754604051636f59503f60e01b81526001600160a01b0390911690636f59503f90610d5d9089908b90600401613622565b600060405180830381600087803b158015610d7757600080fd5b505af1158015610d8b573d6000803e3d6000fd5b50505050610dfb565b6007546040516324b28b1560e11b81526001600160a01b0390911690634965162a90610dc890899085908c906004016135b9565b600060405180830381600087803b158015610de257600080fd5b505af1158015610df6573d6000803e3d6000fd5b505050505b856001600160a01b0316887f5a2849283d692c6535b240a67d3be009f99e4c8c66a13e5238ecfe2ecd9e8f65838a604051610e37929190613622565b60405180910390a3505060018055505050505050565b6000818152600260205260408120600181015482610e6a85611c6e565b905060006103e8600a548560060160000154610e869190614094565b610e909190613f5d565b905082610e9d8284613f20565b610ea791906140b3565b9695505050505050565b6000908152600260205260409020600b015461ffff80821692620100008304821692640100000000900490911690565b600a5481565b60095481565b60026001541415610f105760405162461bcd60e51b815260040161073b90613cc2565b600260018190556000838152602091909152604090206003600a82015460ff16600c811115610f4f57634e487b7160e01b600052602160045260246000fd5b1480610f8157506008600a82015460ff16600c811115610f7f57634e487b7160e01b600052602160045260246000fd5b145b610f9d5760405162461bcd60e51b815260040161073b90613b28565b6000610fa884612b08565b60078301549091506001600160a01b031680610fc2573493505b60018301546000610fd287611c6e565b600b86015490915060009061ffff16610feb8684614094565b610ff59190613f5d565b9050806110028885613f20565b10156110205760405162461bcd60e51b815260040161073b90613b96565b61102988612b64565b506000816110378885613f20565b111561105557816110488885613f20565b61105291906140b3565b90505b61105f81886140b3565b96506001600160a01b0384166110a15780156110865761108661108061293a565b82612a2e565b60075461109c906001600160a01b031688612a2e565b6110bf565b6110bf846110ad61293a565b6007546001600160a01b03168a61293e565b868660010160008282546110d39190613f20565b9091555050600b860154600187015460009184916110f59161ffff1690614094565b6110ff9190613f5d565b6005880154909150600160a81b900460ff168111156111335760058701805460ff60a81b1916600160a81b60ff8416021790555b6008600a88015460ff16600c81111561115c57634e487b7160e01b600052602160045260246000fd5b141561117257600a8701805460ff191660031790555b8261117d8986613f20565b14156111d357600a8701805460ff1916600417905561119a61293a565b60058801546001600160a01b0390811691161480156111c557506005870154600160a01b900460ff16155b156111d3576111d389612588565b887f337875b31ca148911f20ebb44d810f124d810dd362ca3065c8591e09b3fb73f533878b604051611207939291906135b9565b60405180910390a250506001805550505050505050565b60045481565b6000828152600260205260408120600c0180548291908490811061125857634e487b7160e01b600052603260045260246000fd5b600091825260208083209091015486835260029091526040909120600d0180546001600160a01b03909216935090849081106112a457634e487b7160e01b600052603260045260246000fd5b906000526020600020015490509250929050565b6112c061293a565b6001600160a01b03166112d16114e1565b6001600160a01b0316146112f75760405162461bcd60e51b815260040161073b90613abc565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b600260015414156113645760405162461bcd60e51b815260040161073b90613cc2565b6002600155816000805b8281101561145257600086868381811061139857634e487b7160e01b600052603260045260246000fd5b602090810292909201356000818152600290935260409092206007810154929350916001600160a01b03888116911614905080156113fb5750600a8082015460ff16600c8111156113f957634e487b7160e01b600052602160045260246000fd5b145b801561141757504260055482600301546114159190613f20565b115b1561143d57600481015461142b9085613f20565b600a8201805460ff1916600c17905593505b5050808061144a906140ca565b91505061136e565b5060085461146b9084906001600160a01b031683612c6f565b505060018055505050565b33736c641ce6a7216f12d28692f9d8b2bdcde812ed2b1461149657600080fd5b600491909155600555565b600081815260026020526040812060058101546004546114cb91600160a81b900460ff1690614094565b81600201546114da9190613f20565b9392505050565b6000546001600160a01b031690565b6007546001600160a01b031681565b600090815260026020526040902060078101546006909101546001600160a01b0390911691565b6006546001600160a01b031681565b61153d61293a565b6001600160a01b031661154e6114e1565b6001600160a01b0316146115745760405162461bcd60e51b815260040161073b90613abc565b600260015414156115975760405162461bcd60e51b815260040161073b90613cc2565b60026001819055600084815260208290526040902090600a82015460ff16600c8111156115d457634e487b7160e01b600052602160045260246000fd5b146115f15760405162461bcd60e51b815260040161073b90613711565b6001600160a01b0383166116175760405162461bcd60e51b815260040161073b90613c14565b811561173f57600c81015460005b818110156116fb576116e983600c01828154811061165357634e487b7160e01b600052603260045260246000fd5b9060005260206000200160009054906101000a90046001600160a01b0316863086600e01858154811061169657634e487b7160e01b600052603260045260246000fd5b90600052602060002090602091828204019190069054906101000a900460ff1687600d0186815481106116d957634e487b7160e01b600052603260045260246000fd5b906000526020600020015461283e565b806116f3816140ca565b915050611625565b50600a8201805460ff19166003179055426002830155600982015460088301546007546001600160a01b03928316926117379184911683612c6f565b5050506117e7565b600a8101805460ff191660069081179091556007820154908201546001600160a01b0390911690816117c1578034101561178b5760405162461bcd60e51b815260040161073b90613af1565b803411156117a6576117a6856117a183346140b3565b612a2e565b6007546117bc906001600160a01b031682612a2e565b6117db565b6007546117db90839087906001600160a01b03168461293e565b6117e486612c97565b50505b826001600160a01b0316847f7aaf993782070c73bb2987e6cd8e60d71f407e727a8c44101a341680260ff50084604051611821919061366d565b60405180910390a35050600180555050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600090815260026020526040902060098101546008909101546001600160a01b0390911691565b63bc197c8160e01b95945050505050565b600260015414156118b25760405162461bcd60e51b815260040161073b90613cc2565b600260018190556000828152602091909152604090206118d061293a565b60058201546001600160a01b03908116911614801561191557506001600a82015460ff16600c81111561191357634e487b7160e01b600052602160045260246000fd5b145b6119315760405162461bcd60e51b815260040161073b90613c44565b600a8101805460ff1916600717905561194982612c97565b817fd7c51777aa8fac36ec01ee3c9f7e62a08837a6f6074d0d02d94ce108b3ae931161197361293a565b60405161198091906135a5565b60405180910390a2505060018055565b600260015414156119b35760405162461bcd60e51b815260040161073b90613cc2565b60026001556006546001600160a01b03166119cc61293a565b6001600160a01b0316146119f25760405162461bcd60e51b815260040161073b90613c44565b60008281526002602052604090206009600a82015460ff16600c811115611a2957634e487b7160e01b600052602160045260246000fd5b14611a465760405162461bcd60e51b815260040161073b90613a3a565b60078101546001600160a01b03168015611a605782611a62565b345b92506000611a6f85610e4d565b90506001600160a01b038216611aac57808411611a8c5783611a8e565b805b600854909150611aa7906001600160a01b031682612a2e565b611ae9565b611abf82611ab861293a565b308761293e565b808411611acc5783611ace565b805b600854909150611ae99083906001600160a01b031683612ccc565b600a838101805460ff1916909117905580841115611b1157611b0b81856140b3565b60048401555b42600384015560405185907fb05ced90bd7d793d66e9da2b341f252ee2aeb662ca3680be0d5e73bab4f8da6790611b4b9087908590613dfa565b60405180910390a2505060018055505050565b611b6661293a565b6001600160a01b0316611b776114e1565b6001600160a01b031614611b9d5760405162461bcd60e51b815260040161073b90613abc565b6001600160a01b03821615801590611bbd57506001600160a01b03851615155b611bd95760405162461bcd60e51b815260040161073b90613c14565b600880546001600160a01b038088166001600160a01b0319928316179092556009869055600a8590556006805485841690831617905560078054848416921691909117908190556040517f7229d407fca4e1dddfa1d0522b2690427047eb8ab00d60ced49f011bcc39a14192611c5992899289928992899291169061363b565b60405180910390a15050505050565b60055481565b6000818152600260205260408120600b81015461271090611c9b90640100000000900461ffff1682613efa565b6006830154611cae9161ffff1690614094565b6114da9190613f5d565b60035481565b60026001541415611ce15760405162461bcd60e51b815260040161073b90613cc2565b600260018190556000828152602091909152604090206003600a82015460ff16600c811115611d2057634e487b7160e01b600052602160045260246000fd5b14611d3d5760405162461bcd60e51b815260040161073b90613b28565b42611d47836114a1565b10611d645760405162461bcd60e51b815260040161073b90613d48565b611d6d82612b64565b600a8101805460ff1916600817905560405182907f0789b7097e8066538cfaa1132488b132e14ba5f0c938c8b7aaf8cf40356aab0b90600090a2505060018055565b6000908152600260205260409020600c015490565b60026020818152600092835260409283902080546001820154938201546003830154600484015460058501548851808a018a526006870154815260078701546001600160a01b03908116828a01528a51808c018c526008890154815260098901548216818b0152600a8901548c51606081018e52600b909a015461ffff8082168c5262010000820481169c8c019c909c526401000000009004909a169b89019b909b52959994979396929582169460ff600160a01b8404811695600160a81b909404811694929391929116908c565b63f23a6e6160e01b95945050505050565b611eac61293a565b6001600160a01b0316611ebd6114e1565b6001600160a01b031614611ee35760405162461bcd60e51b815260040161073b90613abc565b6001600160a01b038116611f095760405162461bcd60e51b815260040161073b90613748565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b60038a148015611f745750600284145b611f905760405162461bcd60e51b815260040161073b906138d1565b60008b8b6000818110611fb357634e487b7160e01b600052603260045260246000fd5b9050602002016020810190611fc8919061344c565b905060008c8c6001818110611fed57634e487b7160e01b600052603260045260246000fd5b9050602002016020810190612002919061344c565b905060008d8d600281811061202757634e487b7160e01b600052603260045260246000fd5b905060200201602081019061203c919061344c565b905060008e8e600181811061206157634e487b7160e01b600052603260045260246000fd5b9050602002016020810190612076919061344c565b61ffff16116120975760405162461bcd60e51b815260040161073b9061378e565b60008e8e60008181106120ba57634e487b7160e01b600052603260045260246000fd5b90506020020160208101906120cf919061344c565b61ffff16116120f05760405162461bcd60e51b815260040161073b90613cf9565b8861210d5760405162461bcd60e51b815260040161073b90613bcd565b60008c8c600181811061213057634e487b7160e01b600052603260045260246000fd5b905060200201602081019061214591906130c8565b905060008d8d600081811061216a57634e487b7160e01b600052603260045260246000fd5b905060200201602081019061217f91906130c8565b60075460405163cc16574160e01b81529192506001600160a01b03169063cc165741906121b09084906004016135a5565b602060405180830381600087803b1580156121ca57600080fd5b505af11580156121de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122029190613408565b61221e5760405162461bcd60e51b815260040161073b90613855565b6007546040516308409d7760e01b81526001600160a01b03909116906308409d779061224e9085906004016135a5565b602060405180830381600087803b15801561226857600080fd5b505af115801561227c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122a09190613408565b6122bc5760405162461bcd60e51b815260040161073b90613a71565b806001600160a01b0316826001600160a01b0316141580156122e657506001600160a01b03821615155b6123025760405162461bcd60e51b815260040161073b906136d0565b8a871480156123115750855187145b61232d5760405162461bcd60e51b815260040161073b906137f8565b6123376003612db2565b60006123436003612dbb565b905060008b8b600081811061236857634e487b7160e01b600052603260045260246000fd5b90506020020135905060008c8c600181811061239457634e487b7160e01b600052603260045260246000fd5b9050602002013590506123a985610b3461293a565b8e8e60026000868152602001908152602001600020600c0191906123ce929190612dbf565b506123d761293a565b60008481526002602081815260408084206005810180546001600160a01b039788166001600160a01b031991821617909155825180840184528681528b88168186019081528b88528686529051600684015551600783018054918916918316919091179055825180840184528881528c88168186019081528b8852868652905160088401555160098301805491909816911617909555805160608101825261ffff808f1682528d81168285019081528d8216938301938452958a9052939092529051600b850180549451925184166401000000000265ffff0000000019938516620100000263ffff0000199390951661ffff19909616959095179190911692909217169190911790556124ee90600d018c8c612e22565b506000838152600260209081526040909120838155600a8101805460ff191660011790558a5161252692600e909201918c0190612e5d565b50604051339084907f1e6e02c9589612d091b6d88e3f0a4af8853df1573895d33dc5bd10f27bfbc59790600090a350505050505050505050505050505050505050565b6101f481565b6001600160e01b031981166301ffc9a760e01b14919050565b60008181526002602052604090206004600a82015460ff16600c8111156125bf57634e487b7160e01b600052602160045260246000fd5b146125dc5760405162461bcd60e51b815260040161073b9061398c565b60006125e661293a565b60058301549091506001600160a01b038083169116146126185760405162461bcd60e51b815260040161073b90613c44565b600a8201805460ff1916600590811790915582015460ff600160a01b909104161580159061264857506000600954115b156127505760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156126a857600080fd5b505afa1580156126bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126e09190613511565b6126eb90600a613fc3565b60095460058501546127079190600160a01b900460ff16614094565b6127119190614094565b60085490915061274e907f00000000000000000000000000000000000000000000000000000000000000009084906001600160a01b03168461293e565b505b600c82015460005b8181101561280d57600084600c01828154811061278557634e487b7160e01b600052603260045260246000fd5b6000918252602082200154600d870180546001600160a01b03909216935090849081106127c257634e487b7160e01b600052603260045260246000fd5b906000526020600020015490506127f882308789600e0187815481106108d857634e487b7160e01b600052603260045260246000fd5b50508080612805906140ca565b915050612758565b50837f4459793bb7ed080476f037ed5016eb5366299d029547cdb92e50d4b18cf9d49283604051610bb891906135a5565b600082600181111561286057634e487b7160e01b600052602160045260246000fd5b14156128cd57604051632142170760e11b81526001600160a01b038616906342842e0e90612896908790879086906004016135b9565b600060405180830381600087803b1580156128b057600080fd5b505af11580156128c4573d6000803e3d6000fd5b50505050612933565b604051637921219560e11b81526001600160a01b0386169063f242432a90612900908790879086906001906004016135dd565b600060405180830381600087803b15801561291a57600080fd5b505af115801561292e573d6000803e3d6000fd5b505050505b5050505050565b3390565b600080856001600160a01b03166323b872dd868686604051602401612965939291906135b9565b6040516020818303038152906040529060e01b6020820180516001600160e01b03838183161783525050505060405161299e919061356c565b6000604051808303816000865af19150503d80600081146129db576040519150601f19603f3d011682016040523d82523d6000602084013e6129e0565b606091505b5091509150818015612a0a575080511580612a0a575080806020019051810190612a0a9190613408565b612a265760405162461bcd60e51b815260040161073b90613c71565b505050505050565b604080516000808252602082019092526001600160a01b038416908390604051612a58919061356c565b60006040518083038185875af1925050503d8060008114612a95576040519150601f19603f3d011682016040523d82523d6000602084013e612a9a565b606091505b5050905080612abb5760405162461bcd60e51b815260040161073b90613d7f565b505050565b600082612adf5760405162461bcd60e51b815260040161073b9061368d565b82612aec83612710613f20565b612af69086614094565b612b009190613f5d565b949350505050565b6000818152600260208190526040822001546004548290612b2983426140b3565b612b339190613f5d565b6000858152600260205260409020600b015490915061ffff16808211612b595781612b5b565b805b95945050505050565b60008181526002602052604090206003600a82015460ff16600c811115612b9b57634e487b7160e01b600052602160045260246000fd5b1480612bcd57506008600a82015460ff16600c811115612bcb57634e487b7160e01b600052602160045260246000fd5b145b612be95760405162461bcd60e51b815260040161073b9061389a565b6000612bf483612b08565b6005830154909150600160a81b900460ff1680821115612c695760058301805460ff60a81b1916600160a81b60ff851602179055612c3281836140b3565b600584018054601490612c50908490600160a01b900460ff16613f38565b92506101000a81548160ff021916908360ff1602179055505b50505050565b6001600160a01b038316612c8c57612c878282612a2e565b612abb565b612abb838383612ccc565b60008181526002602052604090206009810154600882015460058301546001600160a01b039283169216612933838284612c6f565b600080846001600160a01b031663a9059cbb8585604051602401612cf1929190613622565b6040516020818303038152906040529060e01b6020820180516001600160e01b038381831617835250505050604051612d2a919061356c565b6000604051808303816000865af19150503d8060008114612d67576040519150601f19603f3d011682016040523d82523d6000602084013e612d6c565b606091505b5091509150818015612d96575080511580612d96575080806020019051810190612d969190613408565b6129335760405162461bcd60e51b815260040161073b90613908565b80546001019055565b5490565b828054828255906000526020600020908101928215612e12579160200282015b82811115612e125781546001600160a01b0319166001600160a01b03843516178255602090920191600190910190612ddf565b50612e1e929150612f16565b5090565b828054828255906000526020600020908101928215612e12579160200282015b82811115612e12578235825591602001919060010190612e42565b82805482825590600052602060002090601f01602090048101928215612e125791602002820160005b83821115612ee057835183826101000a81548160ff02191690836001811115612ebf57634e487b7160e01b600052602160045260246000fd5b02179055509260200192600101602081600001049283019260010302612e86565b8015612f0d5782816101000a81549060ff0219169055600101602081600001049283019260010302612ee0565b5050612e1e9291505b5b80821115612e1e5760008155600101612f17565b80356001600160a01b038116811461071357600080fd5b60008083601f840112612f53578182fd5b50813567ffffffffffffffff811115612f6a578182fd5b6020830191508360208083028501011115612f8457600080fd5b9250929050565b600082601f830112612f9b578081fd5b81356020612fb0612fab83613ed6565b613eac565b8281528181019085830183850287018401881015612fcc578586fd5b855b85811015612ff657813560028110612fe4578788fd5b84529284019290840190600101612fce565b5090979650505050505050565b600082601f830112613013578081fd5b81356020613023612fab83613ed6565b828152818101908583018385028701840188101561303f578586fd5b855b85811015612ff657813584529284019290840190600101613041565b600082601f83011261306d578081fd5b813567ffffffffffffffff811115613087576130876140fb565b61309a601f8201601f1916602001613eac565b8181528460208386010111156130ae578283fd5b816020850160208301379081016020019190915292915050565b6000602082840312156130d9578081fd5b6114da82612f2b565b600080600080600060a086880312156130f9578081fd5b61310286612f2b565b945061311060208701612f2b565b9350604086013567ffffffffffffffff8082111561312c578283fd5b61313889838a01613003565b9450606088013591508082111561314d578283fd5b61315989838a01613003565b9350608088013591508082111561316e578283fd5b5061317b8882890161305d565b9150509295509295909350565b6000806000806080858703121561319d578384fd5b6131a685612f2b565b93506131b460208601612f2b565b925060408501359150606085013567ffffffffffffffff8111156131d6578182fd5b6131e28782880161305d565b91505092959194509250565b600080600080600060a08688031215613205578081fd5b61320e86612f2b565b945061321c60208701612f2b565b93506040860135925060608601359150608086013567ffffffffffffffff811115613245578182fd5b61317b8882890161305d565b600080600080600060a08688031215613268578081fd5b61327186612f2b565b9450602086013593506040860135925061328d60608701612f2b565b915061329b60808701612f2b565b90509295509295909350565b600080600080600080600080600080600060c08c8e0312156132c7578889fd5b67ffffffffffffffff808d3511156132dd57898afd5b6132ea8e8e358f01612f42565b909c509a5060208d01358110156132ff57898afd5b61330f8e60208f01358f01612f42565b909a50985060408d0135811015613324578687fd5b6133348e60408f01358f01612f42565b909850965060608d0135811015613349578586fd5b6133598e60608f01358f01612f42565b909650945060808d013581101561336e578384fd5b61337e8e60808f01358f01612f42565b909450925060a08d0135811015613393578182fd5b506133a48d60a08e01358e01612f8b565b90509295989b509295989b9093969950565b6000806000604084860312156133ca578081fd5b833567ffffffffffffffff8111156133e0578182fd5b6133ec86828701612f42565b90945092506133ff905060208501612f2b565b90509250925092565b600060208284031215613419578081fd5b81516114da81614111565b600060208284031215613435578081fd5b81356001600160e01b0319811681146114da578182fd5b60006020828403121561345d578081fd5b813561ffff811681146114da578182fd5b60006020828403121561347f578081fd5b5035919050565b60008060006060848603121561349a578081fd5b833592506134aa60208501612f2b565b915060408401356134ba81614111565b809150509250925092565b600080604083850312156134d7578182fd5b50508035926020909101359150565b6000806000606084860312156134fa578081fd5b83359250602084013591506133ff60408501612f2b565b600060208284031215613522578081fd5b815160ff811681146114da578182fd5b805182526020908101516001600160a01b0316910152565b805161ffff908116835260208083015182169084015260409182015116910152565b60008251815b8181101561358c5760208186018101518583015201613572565b8181111561359a5782828501525b509190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0394851681529290931660208301526040820152606081019190915260a060808201819052600490820152630307830360e41b60c082015260e00190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0395861681526020810194909452604084019290925283166060830152909116608082015260a00190565b901515815260200190565b6001600160e01b031991909116815260200190565b60208082526023908201527f54726962654f6e6548656c7065723a204c54562073686f756c64206e6f74206260408201526206520360ec1b606082015260800190565b60208082526021908201527f54726962654f6e653a2057726f6e6720636f6c6c61746572616c2061737365746040820152607360f81b606082015260800190565b6020808252601b908201527f54726962654f6e653a204e6f7420617070726f766564206c6f616e0000000000604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252818101527f54726962654f6e653a204c54562073686f756c64206e6f74206265205a45524f604082015260600190565b6020808252818101527f54726962654f6e653a204e6f20616d6f756e7420746f2067697665206261636b604082015260600190565b6020808252603d908201527f54726962654f6e653a204e46542070726f766964656420696e666f726d61746960408201527f6f6e7320617265206d697373696e67206f7220696e636f6d706c657465000000606082015260800190565b60208082526025908201527f54726962654f6e653a204c6f616e206173736574206973206e6f7420617661696040820152646c61626c6560d81b606082015260800190565b6020808252601a908201527f54726962654f6e653a204e6f742061637469766564206c6f616e000000000000604082015260600190565b6020808252601b908201527f54726962654f6e653a20496e76616c696420706172616d657465720000000000604082015260600190565b6020808252602d908201527f54726962654f6e6548656c7065723a3a736166655472616e736665723a20747260408201526c185b9cd9995c8819985a5b1959609a1b606082015260800190565b60208082526019908201527f54726962654f6e653a20496e76616c6964207265717565737400000000000000604082015260600190565b60208082526035908201527f54726962654f6e653a20496e76616c696420737461747573202d20796f752068604082015274617665207374696c6c206465627420746f2070617960581b606082015260800190565b6020808252601390820152722a3934b132a7b7329d102a34b6b29037bb32b960691b604082015260600190565b6020808252601290820152712a3934b127b7329d102337b93134b23232b760711b604082015260600190565b60208082526018908201527f54726962654f6e653a20696e76616c6964207374617475730000000000000000604082015260600190565b6020808252602b908201527f54726962654f6e653a20436f6c6c61746572616c206173736574206973206e6f60408201526a7420617661696c61626c6560a81b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601f908201527f54726962654f6e653a204c657373207468616e206c6f616e20616d6f756e7400604082015260600190565b60208082526018908201527f54726962654f6e653a20496e76616c6964207374617475730000000000000000604082015260600190565b60208082526018908201527f54726962654f6e653a20496e76616c696420616d6f756e740000000000000000604082015260600190565b6020808252601d908201527f54726962654f6e653a20496e73756666696369656e7420416d6f756e74000000604082015260600190565b60208082526027908201527f54726962654f6e653a204c6f616e206d7573742068617665206174206c6561736040820152661d080c4813919560ca1b606082015260800190565b60208082526016908201527554726962654f6e653a205a45524f206164647265737360501b604082015260600190565b6020808252601390820152722a3934b132a7b7329d102337b93134b23232b760691b604082015260600190565b60208082526031908201527f54726962654f6e6548656c7065723a3a7472616e7366657246726f6d3a207472604082015270185b9cd9995c919c9bdb4819985a5b1959607a1b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252602f908201527f54726962654f6e653a204c6f616e206d7573742068617665206174206c65617360408201526e1d080c481a5b9cdd185b1b1b595b9d608a1b606082015260800190565b6020808252601f908201527f54726962654f6e653a204e6f74206f7665726475656420646174652079657400604082015260600190565b60208082526034908201527f54726962654f6e6548656c7065723a3a736166655472616e736665724554483a60408201527308115512081d1c985b9cd9995c8819985a5b195960621b606082015260800190565b61ffff93841681529183166020830152909116604082015260600190565b90815260200190565b918252602082015260400190565b8c8152602081018c9052604081018b9052606081018a9052608081018990526001600160a01b03881660a082015260ff87811660c0830152861660e08201526102008101613e5a610100830187613532565b613e68610140830186613532565b600d8410613e8657634e487b7160e01b600052602160045260246000fd5b83610180830152613e9b6101a083018461354a565b9d9c50505050505050505050505050565b60405181810167ffffffffffffffff81118282101715613ece57613ece6140fb565b604052919050565b600067ffffffffffffffff821115613ef057613ef06140fb565b5060209081020190565b600061ffff808316818516808303821115613f1757613f176140e5565b01949350505050565b60008219821115613f3357613f336140e5565b500190565b600060ff821660ff84168060ff03821115613f5557613f556140e5565b019392505050565b600082613f7857634e487b7160e01b81526012600452602481fd5b500490565b80825b6001808611613f8f5750613fba565b818704821115613fa157613fa16140e5565b80861615613fae57918102915b9490941c938002613f80565b94509492505050565b60006114da60001960ff851684600082613fdf575060016114da565b81613fec575060006114da565b8160018114614002576002811461400c57614039565b60019150506114da565b60ff84111561401d5761401d6140e5565b6001841b915084821115614033576140336140e5565b506114da565b5060208310610133831016604e8410600b841016171561406c575081810a83811115614067576140676140e5565b6114da565b6140798484846001613f7d565b80860482111561408b5761408b6140e5565b02949350505050565b60008160001904831182151516156140ae576140ae6140e5565b500290565b6000828210156140c5576140c56140e5565b500390565b60006000198214156140de576140de6140e5565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b801515811461411f57600080fd5b5056fea26469706673582212205e6b17d126340b9c3a70aff9b891f82061e0c223c87e016074fa22176bc1401764736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createLoan(uint16[],address[],address[],uint256[],uint256[],uint8[])": {
        "details": "_fundAmount shoud be amount in loan currency, and _collateralAmount should be in collateral currency"
      },
      "getBackFund(uint256)": {
        "details": "User can get back the rest money through this function, but he should pay late fee."
      },
      "lockRestAmount(uint256[],address)": {
        "details": "if user does not want to get back rest of money due to some reasons, such as gas fee... we will transfer rest money to our fee address (after 14 days notification). For saving gas fee, we will transfer once for the one kind of token."
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "postLiquidation(uint256,uint256)": {
        "details": "after sold NFT set in market place, and give that fund back to TribeOne Only sales manager can do this"
      },
      "relayNFT(uint256,address,bool)": {
        "details": "_loanId: loanId, _accepted: order to Partner is succeeded or not loan will be back to TribeOne if accepted is false"
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setPeriods(uint256,uint256)": {
        "details": "It's just for only testnet. TODO It should be removed when mainnet deploy"
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "TENOR_UNIT": {
        "details": "It's for only testnet TODO It should reverted to above in mainnet"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/TribeOne.sol:TribeOne",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 120,
        "contract": "contracts/TribeOne.sol:TribeOne",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 5488,
        "contract": "contracts/TribeOne.sol:TribeOne",
        "label": "loans",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(Loan)5483_storage)"
      },
      {
        "astId": 5491,
        "contract": "contracts/TribeOne.sol:TribeOne",
        "label": "loanIds",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(Counter)3755_storage"
      },
      {
        "astId": 5498,
        "contract": "contracts/TribeOne.sol:TribeOne",
        "label": "TENOR_UNIT",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 5501,
        "contract": "contracts/TribeOne.sol:TribeOne",
        "label": "GRACE_PERIOD",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 5503,
        "contract": "contracts/TribeOne.sol:TribeOne",
        "label": "salesManager",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 5505,
        "contract": "contracts/TribeOne.sol:TribeOne",
        "label": "assetManager",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 5507,
        "contract": "contracts/TribeOne.sol:TribeOne",
        "label": "feeTo",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 5511,
        "contract": "contracts/TribeOne.sol:TribeOne",
        "label": "lateFee",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 5513,
        "contract": "contracts/TribeOne.sol:TribeOne",
        "label": "penaltyFee",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_enum(TokenType)7713)dyn_storage": {
        "base": "t_enum(TokenType)7713",
        "encoding": "dynamic_array",
        "label": "enum TribeOneHelper.TokenType[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_enum(Status)5432": {
        "encoding": "inplace",
        "label": "enum TribeOne.Status",
        "numberOfBytes": "1"
      },
      "t_enum(TokenType)7713": {
        "encoding": "inplace",
        "label": "enum TribeOneHelper.TokenType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_struct(Loan)5483_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct TribeOne.Loan)",
        "numberOfBytes": "32",
        "value": "t_struct(Loan)5483_storage"
      },
      "t_struct(Asset)5437_storage": {
        "encoding": "inplace",
        "label": "struct TribeOne.Asset",
        "members": [
          {
            "astId": 5434,
            "contract": "contracts/TribeOne.sol:TribeOne",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5436,
            "contract": "contracts/TribeOne.sol:TribeOne",
            "label": "currency",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Counter)3755_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 3754,
            "contract": "contracts/TribeOne.sol:TribeOne",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Loan)5483_storage": {
        "encoding": "inplace",
        "label": "struct TribeOne.Loan",
        "members": [
          {
            "astId": 5446,
            "contract": "contracts/TribeOne.sol:TribeOne",
            "label": "fundAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5448,
            "contract": "contracts/TribeOne.sol:TribeOne",
            "label": "paidAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5450,
            "contract": "contracts/TribeOne.sol:TribeOne",
            "label": "loanStart",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5452,
            "contract": "contracts/TribeOne.sol:TribeOne",
            "label": "postTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5454,
            "contract": "contracts/TribeOne.sol:TribeOne",
            "label": "restAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 5456,
            "contract": "contracts/TribeOne.sol:TribeOne",
            "label": "borrower",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 5458,
            "contract": "contracts/TribeOne.sol:TribeOne",
            "label": "nrOfPenalty",
            "offset": 20,
            "slot": "5",
            "type": "t_uint8"
          },
          {
            "astId": 5460,
            "contract": "contracts/TribeOne.sol:TribeOne",
            "label": "passedTenors",
            "offset": 21,
            "slot": "5",
            "type": "t_uint8"
          },
          {
            "astId": 5463,
            "contract": "contracts/TribeOne.sol:TribeOne",
            "label": "loanAsset",
            "offset": 0,
            "slot": "6",
            "type": "t_struct(Asset)5437_storage"
          },
          {
            "astId": 5466,
            "contract": "contracts/TribeOne.sol:TribeOne",
            "label": "collateralAsset",
            "offset": 0,
            "slot": "8",
            "type": "t_struct(Asset)5437_storage"
          },
          {
            "astId": 5469,
            "contract": "contracts/TribeOne.sol:TribeOne",
            "label": "status",
            "offset": 0,
            "slot": "10",
            "type": "t_enum(Status)5432"
          },
          {
            "astId": 5472,
            "contract": "contracts/TribeOne.sol:TribeOne",
            "label": "loanRules",
            "offset": 0,
            "slot": "11",
            "type": "t_struct(LoanRules)5444_storage"
          },
          {
            "astId": 5475,
            "contract": "contracts/TribeOne.sol:TribeOne",
            "label": "nftAddressArray",
            "offset": 0,
            "slot": "12",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 5478,
            "contract": "contracts/TribeOne.sol:TribeOne",
            "label": "nftTokenIdArray",
            "offset": 0,
            "slot": "13",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 5482,
            "contract": "contracts/TribeOne.sol:TribeOne",
            "label": "nftTokenTypeArray",
            "offset": 0,
            "slot": "14",
            "type": "t_array(t_enum(TokenType)7713)dyn_storage"
          }
        ],
        "numberOfBytes": "480"
      },
      "t_struct(LoanRules)5444_storage": {
        "encoding": "inplace",
        "label": "struct TribeOne.LoanRules",
        "members": [
          {
            "astId": 5439,
            "contract": "contracts/TribeOne.sol:TribeOne",
            "label": "tenor",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 5441,
            "contract": "contracts/TribeOne.sol:TribeOne",
            "label": "LTV",
            "offset": 2,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 5443,
            "contract": "contracts/TribeOne.sol:TribeOne",
            "label": "interest",
            "offset": 4,
            "slot": "0",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}