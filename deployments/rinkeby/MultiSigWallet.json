{
  "address": "0xca1b4caF38c4449af2183745A00cC3793C2D344c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_signers",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_numConfirmationsRequired",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "signer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "txIndex",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "SubmitTransaction",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "getSigners",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTransactionCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isConfirmed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isSigner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numConfirmationsRequired",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "signers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        },
        {
          "internalType": "bytes32[]",
          "name": "rs",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "ss",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint8[]",
          "name": "vs",
          "type": "uint8[]"
        }
      ],
      "name": "submitTransaction",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "txIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x2ef73bd1650611bb1305a9904c5aa22e0e875ea0f67e410d4a516e55b674d7bd",
  "receipt": {
    "to": null,
    "from": "0x6C641CE6A7216F12d28692f9d8b2BDcdE812eD2b",
    "contractAddress": "0xca1b4caF38c4449af2183745A00cC3793C2D344c",
    "transactionIndex": 1,
    "gasUsed": "1208258",
    "logsBloom": "0x
    "blockHash": "0xfdcdfaf46c57e0c0230410763ccbef66778574514e66b8c13e4a41fa47c5bfd0",
    "transactionHash": "0x2ef73bd1650611bb1305a9904c5aa22e0e875ea0f67e410d4a516e55b674d7bd",
    "logs": [],
    "blockNumber": 9705071,
    "cumulativeGasUsed": "1374862",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0x6C641CE6A7216F12d28692f9d8b2BDcdE812eD2b",
      "0xDEfd29b83702cC5dA21a65Eed1FEC2CEAB768074",
      "0x8c7D7aB71Bb76F1fdfB9525DD25E4e060fa0995A",
      "0x9C702CC077FE63F0BA5b69dac3861ed5727778c9",
      "0x69927ab9c9937f36312958E192d27819522eeEC9",
      "0xb89e07389A98f6FA9bee9c4De220E95eba30Abe9",
      "0x9066FDDc2672Ea3faA20B377126e3f3Fe0221775",
      "0x495A1abaB1A5E2c71BAe9E686309704032D61939"
    ],
    2
  ],
  "solcInputHash": "83cf65f864b5203214d88b9bbbb2a3df",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_signers\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_numConfirmationsRequired\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"txIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"SubmitTransaction\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getSigners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTransactionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isConfirmed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isSigner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numConfirmationsRequired\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"signers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"rs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"ss\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint8[]\",\"name\":\"vs\",\"type\":\"uint8[]\"}],\"name\":\"submitTransaction\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MultiSigWallet.sol\":\"MultiSigWallet\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x1278c76b840063ff5e14a2d7c5707812c1eabc2342ed040bf862c2d7552102fe\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x62d306ff0499a11913bc60b5939eec619509b5c67b30e86ebf8b8bda0b7a7fee\",\"license\":\"MIT\"},\"contracts/MultiSigWallet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\ncontract MultiSigWallet is ReentrancyGuard {\\n    using Counters for Counters.Counter;\\n    event Deposit(address indexed sender, uint256 amount, uint256 balance);\\n    event SubmitTransaction(address indexed signer, uint256 indexed txIndex, address indexed to, uint256 value, bytes data);\\n\\n    address[] public signers;\\n    mapping(address => bool) public isSigner;\\n    uint256 public numConfirmationsRequired;\\n\\n    // struct Transaction {\\n    //     address to;\\n    //     uint256 value;\\n    //     bytes data;\\n    //     bool executed;\\n    //     uint256 numConfirmations;\\n    // }\\n\\n    // mapping from tx index => signer => bool\\n    mapping(uint256 => mapping(address => bool)) public isConfirmed;\\n    Counters.Counter public txIds; // loanId is from No.1\\n\\n    // Transaction[] private transactions;\\n\\n    modifier onlySigner() {\\n        require(isSigner[msg.sender], \\\"not signer\\\");\\n        _;\\n    }\\n\\n    constructor(address[] memory _signers, uint256 _numConfirmationsRequired) {\\n        require(_signers.length > 0, \\\"signers required\\\");\\n        require(\\n            _numConfirmationsRequired > 0 && _numConfirmationsRequired <= _signers.length,\\n            \\\"invalid number of required confirmations\\\"\\n        );\\n\\n        for (uint256 i = 0; i < _signers.length; i++) {\\n            address signer = _signers[i];\\n\\n            require(signer != address(0), \\\"invalid signer\\\");\\n            require(!isSigner[signer], \\\"signer not unique\\\");\\n\\n            isSigner[signer] = true;\\n            signers.push(signer);\\n        }\\n\\n        numConfirmationsRequired = _numConfirmationsRequired;\\n    }\\n\\n    receive() external payable {\\n        emit Deposit(msg.sender, msg.value, address(this).balance);\\n    }\\n\\n    function submitTransaction(\\n        address _to,\\n        uint256 _value,\\n        bytes memory _data,\\n        bytes32[] memory rs,\\n        bytes32[] memory ss,\\n        uint8[] memory vs\\n    ) external payable onlySigner nonReentrant {\\n        require(rs.length == ss.length && ss.length == vs.length, \\\"Signaure lengths should be same\\\");\\n        uint256 sigLength = rs.length;\\n        require(sigLength >= numConfirmationsRequired, \\\"Less than needed required confirmations\\\");\\n        if (_value > 0) {\\n            require(msg.value == _value, \\\"Should send value\\\");\\n        }\\n        uint256 ii;\\n        uint256 txIdx = txIds.current();\\n        for (ii = 0; ii < sigLength; ii++) {\\n            address _signer = _getSigner(_to, _value, _data, rs[ii], ss[ii], vs[ii]);\\n            require(isSigner[_signer] && !isConfirmed[txIdx][_signer], \\\"Not signer or duplicated signer for this transaction\\\");\\n            isConfirmed[txIdx][_signer] = true;\\n        }\\n        (bool success, ) = _to.call{value: _value}(_data);\\n        require(success, \\\"tx failed\\\");\\n\\n        txIds.increment();\\n        emit SubmitTransaction(msg.sender, txIdx, _to, _value, _data);\\n    }\\n\\n    function _getSigner(\\n        address _to,\\n        uint256 _value,\\n        bytes memory _data,\\n        bytes32 r,\\n        bytes32 s,\\n        uint8 v\\n    ) private pure returns (address) {\\n        bytes32 msgHash = keccak256(abi.encodePacked(_to, _value, _data));\\n        bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", msgHash));\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        return recoveredAddress;\\n    }\\n\\n    function getSigners() public view returns (address[] memory) {\\n        return signers;\\n    }\\n\\n    function getTransactionCount() public view returns (uint256) {\\n        return txIds.current();\\n    }\\n}\\n\",\"keccak256\":\"0xaad6b8e7fdef443cc1e2517703b045dddaa2cc6f73326b77b56596db94db8094\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200109b3803806200109b8339810160408190526200003491620001de565b60016000558151620000635760405162461bcd60e51b81526004016200005a90620002dc565b60405180910390fd5b60008111801562000075575081518111155b620000945760405162461bcd60e51b81526004016200005a9062000331565b60005b8251811015620001b6576000838281518110620000c457634e487b7160e01b600052603260045260246000fd5b6020026020010151905060006001600160a01b0316816001600160a01b03161415620001045760405162461bcd60e51b81526004016200005a90620002b4565b6001600160a01b03811660009081526002602052604090205460ff1615620001405760405162461bcd60e51b81526004016200005a9062000306565b6001600160a01b03166000818152600260205260408120805460ff191660019081179091558054808201825591527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b031916909117905580620001ad8162000379565b91505062000097565b5060035550620003b7565b80516001600160a01b0381168114620001d957600080fd5b919050565b60008060408385031215620001f1578182fd5b82516001600160401b038082111562000208578384fd5b818501915085601f8301126200021c578384fd5b8151602082821115620002335762000233620003a1565b80820260405182828201018181108682111715620002555762000255620003a1565b604052838152828101945085830182870184018b101562000274578889fd5b8896505b84871015620002a1576200028c81620001c1565b86526001969096019594830194830162000278565b5097909101519698969750505050505050565b6020808252600e908201526d34b73b30b634b21039b4b3b732b960911b604082015260600190565b60208082526010908201526f1cda59db995c9cc81c995c5d5a5c995960821b604082015260600190565b6020808252601190820152707369676e6572206e6f7420756e6971756560781b604082015260600190565b60208082526028908201527f696e76616c6964206e756d626572206f6620726571756972656420636f6e6669604082015267726d6174696f6e7360c01b606082015260800190565b60006000198214156200039a57634e487b7160e01b81526011600452602481fd5b5060010190565b634e487b7160e01b600052604160045260246000fd5b610cd480620003c76000396000f3fe60806040526004361061007f5760003560e01c806394cf795e1161004e57806394cf795e14610173578063b42edf5214610195578063d0549b85146101aa578063da33f1a4146101bf576100c9565b80632079fb9a146100ce5780632e7700f0146101045780637df73e271461012657806380f59a6514610153576100c9565b366100c957336001600160a01b03167f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a1534476040516100bf929190610bd5565b60405180910390a2005b600080fd5b3480156100da57600080fd5b506100ee6100e93660046108be565b6101d4565b6040516100fb919061098d565b60405180910390f35b34801561011057600080fd5b506101196101fe565b6040516100fb9190610b92565b34801561013257600080fd5b506101466101413660046107dc565b61020f565b6040516100fb91906109ee565b34801561015f57600080fd5b5061014661016e3660046108d6565b610224565b34801561017f57600080fd5b50610188610244565b6040516100fb91906109a1565b3480156101a157600080fd5b506101196102a6565b3480156101b657600080fd5b506101196102ac565b6101d26101cd3660046107fd565b6102b2565b005b600181815481106101e457600080fd5b6000918252602090912001546001600160a01b0316905081565b600061020a60056105ba565b905090565b60026020526000908152604090205460ff1681565b600460209081526000928352604080842090915290825290205460ff1681565b6060600180548060200260200160405190810160405280929190818152602001828054801561029c57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161027e575b5050505050905090565b60055481565b60035481565b3360009081526002602052604090205460ff166102ea5760405162461bcd60e51b81526004016102e190610ae9565b60405180910390fd5b6002600054141561030d5760405162461bcd60e51b81526004016102e190610b5b565b600260005581518351148015610324575080518251145b6103405760405162461bcd60e51b81526004016102e190610ab2565b82516003548110156103645760405162461bcd60e51b81526004016102e190610a17565b8515610389578534146103895760405162461bcd60e51b81526004016102e190610b30565b60008061039660056105ba565b9050600091505b828210156104d357600061042a8a8a8a8a87815181106103cd57634e487b7160e01b600052603260045260246000fd5b60200260200101518a88815181106103f557634e487b7160e01b600052603260045260246000fd5b60200260200101518a898151811061041d57634e487b7160e01b600052603260045260246000fd5b60200260200101516105c2565b6001600160a01b03811660009081526002602052604090205490915060ff168015610478575060008281526004602090815260408083206001600160a01b038516845290915290205460ff16155b6104945760405162461bcd60e51b81526004016102e190610a5e565b60008281526004602090815260408083206001600160a01b03909416835292905220805460ff19166001179055816104cb81610c61565b92505061039d565b6000896001600160a01b031689896040516104ee9190610940565b60006040518083038185875af1925050503d806000811461052b576040519150601f19603f3d011682016040523d82523d6000602084013e610530565b606091505b50509050806105515760405162461bcd60e51b81526004016102e190610b0d565b61055b600561067d565b896001600160a01b031682336001600160a01b03167fd5a05bf70715ad82a09a756320284a1b54c9ff74cd0f8cce6219e79b563fe59d8c8c6040516105a1929190610b9b565b60405180910390a4505060016000555050505050505050565b80545b919050565b6000808787876040516020016105da93929190610901565b604051602081830303815290604052805190602001209050600081604051602001610605919061095c565b60405160208183030381529060405280519060200120905060006001828689896040516000815260200160405260405161064294939291906109f9565b6020604051602081039080840390855afa158015610664573d6000803e3d6000fd5b5050604051601f1901519b9a5050505050505050505050565b80546001019055565b80356001600160a01b03811681146105bd57600080fd5b600082601f8301126106ad578081fd5b813560206106c26106bd83610c0d565b610be3565b82815281810190858301838502870184018810156106de578586fd5b855b858110156106fc578135845292840192908401906001016106e0565b5090979650505050505050565b600082601f830112610719578081fd5b813560206107296106bd83610c0d565b8281528181019085830183850287018401881015610745578586fd5b855b858110156106fc57813560ff8116811461075f578788fd5b84529284019290840190600101610747565b600082601f830112610781578081fd5b813567ffffffffffffffff81111561079b5761079b610c88565b6107ae601f8201601f1916602001610be3565b8181528460208386010111156107c2578283fd5b816020850160208301379081016020019190915292915050565b6000602082840312156107ed578081fd5b6107f682610686565b9392505050565b60008060008060008060c08789031215610815578182fd5b61081e87610686565b955060208701359450604087013567ffffffffffffffff80821115610841578384fd5b61084d8a838b01610771565b95506060890135915080821115610862578384fd5b61086e8a838b0161069d565b94506080890135915080821115610883578384fd5b61088f8a838b0161069d565b935060a08901359150808211156108a4578283fd5b506108b189828a01610709565b9150509295509295509295565b6000602082840312156108cf578081fd5b5035919050565b600080604083850312156108e8578182fd5b823591506108f860208401610686565b90509250929050565b60006bffffffffffffffffffffffff198560601b1682528360148301528251610931816034850160208701610c31565b91909101603401949350505050565b60008251610952818460208701610c31565b9190910192915050565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c810191909152603c0190565b6001600160a01b0391909116815260200190565b6020808252825182820181905260009190848201906040850190845b818110156109e25783516001600160a01b0316835292840192918401916001016109bd565b50909695505050505050565b901515815260200190565b93845260ff9290921660208401526040830152606082015260800190565b60208082526027908201527f4c657373207468616e206e656564656420726571756972656420636f6e6669726040820152666d6174696f6e7360c81b606082015260800190565b60208082526034908201527f4e6f74207369676e6572206f72206475706c696361746564207369676e6572206040820152733337b9103a3434b9903a3930b739b0b1ba34b7b760611b606082015260800190565b6020808252601f908201527f5369676e61757265206c656e677468732073686f756c642062652073616d6500604082015260600190565b6020808252600a90820152693737ba1039b4b3b732b960b11b604082015260600190565b6020808252600990820152681d1e0819985a5b195960ba1b604082015260600190565b60208082526011908201527053686f756c642073656e642076616c756560781b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b90815260200190565b6000838252604060208301528251806040840152610bc0816060850160208701610c31565b601f01601f1916919091016060019392505050565b918252602082015260400190565b60405181810167ffffffffffffffff81118282101715610c0557610c05610c88565b604052919050565b600067ffffffffffffffff821115610c2757610c27610c88565b5060209081020190565b60005b83811015610c4c578181015183820152602001610c34565b83811115610c5b576000848401525b50505050565b6000600019821415610c8157634e487b7160e01b81526011600452602481fd5b5060010190565b634e487b7160e01b600052604160045260246000fdfea26469706673582212207d99c87f30887854cad1aa53cd80f9dfdf8c0bfa60ba4f1aee9be9cce0b6dfb964736f6c63430008000033",
  "deployedBytecode": "0x60806040526004361061007f5760003560e01c806394cf795e1161004e57806394cf795e14610173578063b42edf5214610195578063d0549b85146101aa578063da33f1a4146101bf576100c9565b80632079fb9a146100ce5780632e7700f0146101045780637df73e271461012657806380f59a6514610153576100c9565b366100c957336001600160a01b03167f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a1534476040516100bf929190610bd5565b60405180910390a2005b600080fd5b3480156100da57600080fd5b506100ee6100e93660046108be565b6101d4565b6040516100fb919061098d565b60405180910390f35b34801561011057600080fd5b506101196101fe565b6040516100fb9190610b92565b34801561013257600080fd5b506101466101413660046107dc565b61020f565b6040516100fb91906109ee565b34801561015f57600080fd5b5061014661016e3660046108d6565b610224565b34801561017f57600080fd5b50610188610244565b6040516100fb91906109a1565b3480156101a157600080fd5b506101196102a6565b3480156101b657600080fd5b506101196102ac565b6101d26101cd3660046107fd565b6102b2565b005b600181815481106101e457600080fd5b6000918252602090912001546001600160a01b0316905081565b600061020a60056105ba565b905090565b60026020526000908152604090205460ff1681565b600460209081526000928352604080842090915290825290205460ff1681565b6060600180548060200260200160405190810160405280929190818152602001828054801561029c57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161027e575b5050505050905090565b60055481565b60035481565b3360009081526002602052604090205460ff166102ea5760405162461bcd60e51b81526004016102e190610ae9565b60405180910390fd5b6002600054141561030d5760405162461bcd60e51b81526004016102e190610b5b565b600260005581518351148015610324575080518251145b6103405760405162461bcd60e51b81526004016102e190610ab2565b82516003548110156103645760405162461bcd60e51b81526004016102e190610a17565b8515610389578534146103895760405162461bcd60e51b81526004016102e190610b30565b60008061039660056105ba565b9050600091505b828210156104d357600061042a8a8a8a8a87815181106103cd57634e487b7160e01b600052603260045260246000fd5b60200260200101518a88815181106103f557634e487b7160e01b600052603260045260246000fd5b60200260200101518a898151811061041d57634e487b7160e01b600052603260045260246000fd5b60200260200101516105c2565b6001600160a01b03811660009081526002602052604090205490915060ff168015610478575060008281526004602090815260408083206001600160a01b038516845290915290205460ff16155b6104945760405162461bcd60e51b81526004016102e190610a5e565b60008281526004602090815260408083206001600160a01b03909416835292905220805460ff19166001179055816104cb81610c61565b92505061039d565b6000896001600160a01b031689896040516104ee9190610940565b60006040518083038185875af1925050503d806000811461052b576040519150601f19603f3d011682016040523d82523d6000602084013e610530565b606091505b50509050806105515760405162461bcd60e51b81526004016102e190610b0d565b61055b600561067d565b896001600160a01b031682336001600160a01b03167fd5a05bf70715ad82a09a756320284a1b54c9ff74cd0f8cce6219e79b563fe59d8c8c6040516105a1929190610b9b565b60405180910390a4505060016000555050505050505050565b80545b919050565b6000808787876040516020016105da93929190610901565b604051602081830303815290604052805190602001209050600081604051602001610605919061095c565b60405160208183030381529060405280519060200120905060006001828689896040516000815260200160405260405161064294939291906109f9565b6020604051602081039080840390855afa158015610664573d6000803e3d6000fd5b5050604051601f1901519b9a5050505050505050505050565b80546001019055565b80356001600160a01b03811681146105bd57600080fd5b600082601f8301126106ad578081fd5b813560206106c26106bd83610c0d565b610be3565b82815281810190858301838502870184018810156106de578586fd5b855b858110156106fc578135845292840192908401906001016106e0565b5090979650505050505050565b600082601f830112610719578081fd5b813560206107296106bd83610c0d565b8281528181019085830183850287018401881015610745578586fd5b855b858110156106fc57813560ff8116811461075f578788fd5b84529284019290840190600101610747565b600082601f830112610781578081fd5b813567ffffffffffffffff81111561079b5761079b610c88565b6107ae601f8201601f1916602001610be3565b8181528460208386010111156107c2578283fd5b816020850160208301379081016020019190915292915050565b6000602082840312156107ed578081fd5b6107f682610686565b9392505050565b60008060008060008060c08789031215610815578182fd5b61081e87610686565b955060208701359450604087013567ffffffffffffffff80821115610841578384fd5b61084d8a838b01610771565b95506060890135915080821115610862578384fd5b61086e8a838b0161069d565b94506080890135915080821115610883578384fd5b61088f8a838b0161069d565b935060a08901359150808211156108a4578283fd5b506108b189828a01610709565b9150509295509295509295565b6000602082840312156108cf578081fd5b5035919050565b600080604083850312156108e8578182fd5b823591506108f860208401610686565b90509250929050565b60006bffffffffffffffffffffffff198560601b1682528360148301528251610931816034850160208701610c31565b91909101603401949350505050565b60008251610952818460208701610c31565b9190910192915050565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c810191909152603c0190565b6001600160a01b0391909116815260200190565b6020808252825182820181905260009190848201906040850190845b818110156109e25783516001600160a01b0316835292840192918401916001016109bd565b50909695505050505050565b901515815260200190565b93845260ff9290921660208401526040830152606082015260800190565b60208082526027908201527f4c657373207468616e206e656564656420726571756972656420636f6e6669726040820152666d6174696f6e7360c81b606082015260800190565b60208082526034908201527f4e6f74207369676e6572206f72206475706c696361746564207369676e6572206040820152733337b9103a3434b9903a3930b739b0b1ba34b7b760611b606082015260800190565b6020808252601f908201527f5369676e61757265206c656e677468732073686f756c642062652073616d6500604082015260600190565b6020808252600a90820152693737ba1039b4b3b732b960b11b604082015260600190565b6020808252600990820152681d1e0819985a5b195960ba1b604082015260600190565b60208082526011908201527053686f756c642073656e642076616c756560781b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b90815260200190565b6000838252604060208301528251806040840152610bc0816060850160208701610c31565b601f01601f1916919091016060019392505050565b918252602082015260400190565b60405181810167ffffffffffffffff81118282101715610c0557610c05610c88565b604052919050565b600067ffffffffffffffff821115610c2757610c27610c88565b5060209081020190565b60005b83811015610c4c578181015183820152602001610c34565b83811115610c5b576000848401525b50505050565b6000600019821415610c8157634e487b7160e01b81526011600452602481fd5b5060010190565b634e487b7160e01b600052604160045260246000fdfea26469706673582212207d99c87f30887854cad1aa53cd80f9dfdf8c0bfa60ba4f1aee9be9cce0b6dfb964736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 120,
        "contract": "contracts/MultiSigWallet.sol:MultiSigWallet",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 4841,
        "contract": "contracts/MultiSigWallet.sol:MultiSigWallet",
        "label": "signers",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 4845,
        "contract": "contracts/MultiSigWallet.sol:MultiSigWallet",
        "label": "isSigner",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4847,
        "contract": "contracts/MultiSigWallet.sol:MultiSigWallet",
        "label": "numConfirmationsRequired",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 4853,
        "contract": "contracts/MultiSigWallet.sol:MultiSigWallet",
        "label": "isConfirmed",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 4856,
        "contract": "contracts/MultiSigWallet.sol:MultiSigWallet",
        "label": "txIds",
        "offset": 0,
        "slot": "5",
        "type": "t_struct(Counter)3755_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_struct(Counter)3755_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 3754,
            "contract": "contracts/MultiSigWallet.sol:MultiSigWallet",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}